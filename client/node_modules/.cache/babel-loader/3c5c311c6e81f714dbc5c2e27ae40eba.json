{"ast":null,"code":"var _jsxFileName = \"F:\\\\code\\\\SudoQubs\\\\src\\\\components\\\\4-Four.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport '../styles/0-zero.css';\nimport { qubs, update, cols, boxs, restore, poss, detectdifficulty, megasolution, howmanyQubs, pointerMistakes, rows_cols_to_squares, getBoxFromQ } from '../functions/2-Estructures.js';\nimport { solution } from '../functions/0-Unrepeatable.js';\nimport { type } from '@testing-library/user-event/dist/type'; // const { qubs, update, cols, boxs, restore } = require('../functions/2-Estructures.js');\n// const { solution } = require('../functions/0-Unrepeatable.js');\n// const { create } = require('../functions/3-Creator.js')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Four(_ref) {\n  _s();\n\n  let {\n    unity,\n    rows,\n    loyalindex,\n    carga,\n    sendFill,\n    sendRepsRows,\n    sendRepsCols,\n    sendRepsBoxs,\n    sending\n  } = _ref;\n  //ESTADOS LOCALES\n  let [filas, setFilas] = useState(rows);\n  let [reps, setReps] = useState([]);\n  let [noreps, setNoreps] = useState([]);\n  let [input, setInput] = useState({}); //SIMULACION DE setInput\n  //FUNCIONES\n  //Función que se ejecuta por cada ingreso de cualquier caracter en cualquier casilla:\n\n  function changeEach(e) {\n    var val = e.target.value;\n    console.log(\"unity, typeof loyalindex, val\", unity, loyalindex, val); // if(typeof val === \"string\") return //Si se ingresa una letra, se corta la ejecución (para que las letras no tengan ningún efecto). //Probar esto, escribir la salida acá y borrarla luego de hacer un cambio o de terminar la task. =>\n\n    function politica1() {\n      if (val === '') {\n        console.log('1');\n        return document.getElementsByTagName(\"input\")[loyalindex].value = '';\n      }\n    }\n\n    politica1();\n\n    function politica2() {\n      if (parseInt(val) !== parseInt(val) || val === '0' || val === '') {\n        // si no es un número, se desconsidera\n        console.log('2');\n        document.getElementsByTagName(\"input\")[loyalindex].value = '';\n        console.log(document.getElementsByTagName(\"input\")[loyalindex].value);\n        return;\n      }\n    }\n\n    politica2();\n\n    function politica3() {\n      if (e.target.value.length > 1) {\n        // si la cadena es mayor a 1, se considera solo el [0]\n        politica2();\n        console.log('3');\n        return document.getElementsByTagName(\"input\")[loyalindex].value = val[0];\n      }\n    }\n\n    politica3(); // if(parseInt(val)!==val) {\n    //     console.log('caí en un pozo')\n    //     return\n    // }\n    //No va a ir, todo es un string dentro de un input.\n    //Lo que hay que hacer es parsear la entrada.\n    //Si la entrada parseada es igual a la entrada, es número.\n    //Si la entrada parseada es desigual a la entrada, es string, return.\n    //TODO ARRIBA DE ESTE GRUPO DE COMENTARIOS\n\n    if (val === '') {\n      //Si se borra un numero va a llegar un string vacío\n      unity = 0;\n    }\n\n    if (val !== '') {\n      unity = parseInt(val);\n    }\n\n    qubs[loyalindex] = unity;\n    setFilas(update(loyalindex));\n    sendFill(howmanyQubs(rows)); // console.log(\"megasolution\", megasolution()[rows])\n\n    let repsRows = pointerMistakes('rows', megasolution(2), 2);\n    let repsCols = pointerMistakes('cols', megasolution());\n    let repsBoxs = pointerMistakes('boxs', megasolution());\n    console.log(repsRows);\n    let indexs = [];\n\n    for (let ab = 0; ab < repsRows.length; ab++) {\n      indexs[ab] = [];\n      indexs[ab].push(repsRows[ab]['indice']);\n\n      for (let ac = 0; ac < repsRows[ab]['subindice'].length; ac++) {\n        // console.log(repsRows[ab]['subindice'][ac]) //ÍNDICES\n        indexs[ab].push(repsRows[ab]['subindice'][ac]['reps']);\n      }\n    }\n\n    console.log(indexs);\n    let squares = [];\n\n    for (let i = 0; i < indexs.length; i++) {\n      let first = indexs[i][0];\n      console.log('first', first);\n\n      for (let u = 1; u < indexs[i].length; u++) {\n        let second1 = indexs[i][u][0];\n        let second2 = indexs[i][u][1];\n        console.log('second', second1, second2);\n        let sq1 = rows_cols_to_squares(first, second1, 'rows');\n        let sq2 = rows_cols_to_squares(first, second2, 'rows');\n        squares.push(sq1, sq2);\n      }\n    }\n\n    console.log(squares); //HASTA ACÄ TODO 10 PUNTOS\n    //ANTES HAY QUE HACER LA COMPARACIÓN ENTRE useState() Y pointerMistakes()\n    //EN BASE A ESO, MANDAR A PINTAR Y MANDAR A DESPINTAR\n\n    for (let gamma = 0; gamma < squares.length; gamma++) {\n      // console.log(squares[gamma][0])\n      // console.log(squares[gamma][1])\n      document.getElementsByTagName('input')[squares[gamma]].style.color = 'red';\n      document.getElementsByTagName('input')[squares[gamma]].style.color = 'red';\n    } //Y PUDIERA SER QUE HASTA ACÁ, PERFECTO TAMBIÉN\n    //LO QUE VIENE AHORA SERÍA LO RECIÉN MENCIONADO SOBRE COMPARAR PARA DESPINTAR\n    //TRAEME useState() que contiene lo de la anterior vuelta, (1)\n    //SI ES DISTINTO DE VACÍO, LO ANALIZAMOS. (2)\n    //Recordar que useState() siempre va a guardar todos los datos que le mandemos.\n    //Si nada los borra, quedan ahí. Entonces:\n    //SI useState() PRESENTA DATOS DE pointerMistakes(), IGNORAR ESTOS (3)\n    //SI PRESENTA DATOS QUE pointerMistakes() NO REGISTRÓ, DESPINTARLOS (4)\n    //Nota: al mencionar pointerMistakes(), hacemos referencia al post-producto: es decir los squares que están dentro del Array squares\n\n\n    let noReps = []; // if(reps.length){ //(1), (2)\n\n    for (let delta = 0; delta < reps.length; delta++) {\n      let test = [];\n      let e = 0;\n\n      for (let eco = 0; eco < squares.length; eco++) {\n        // if(eco===delta)continue\n        // if(reps[delta][0]===squares[eco][0]){\n        //     console.log('continue en 0')\n        // }\n        // if(reps[delta][1]===squares[eco][1]){\n        //     console.log('continue en 1')\n        // }\n        if (reps[delta] === squares[eco]) {\n          // console.log(reps[delta, squares[eco]], ' iguales')\n          test.push(1);\n        }\n\n        e = eco; // if(!test.length && e===squares.length-1){\n        //     noReps.push(reps[delta])\n        // }\n      }\n\n      if (!test.length) {\n        noReps.push(reps[delta]);\n      }\n    } // }\n\n\n    console.log(reps, squares, noReps);\n\n    for (let ohmega = 0; ohmega < noReps.length; ohmega++) {\n      let color = noReps[ohmega] % 2 === 0 ? 'orange' : 'orangered';\n      console.log(noReps[ohmega], color);\n      document.getElementsByTagName('input')[noReps[ohmega]].style.color = color;\n    }\n\n    setReps(squares); // setNoreps(...noreps)\n    //LO ÚLTIMO POR HACER ES EL SET DEL STATE\n    // let first, second1, second2, sq=[], sq1, sq2\n    // // if(typeof repsRows==='object'){\n    // if(repsRows.length){\n    // //     // console.log(repsRows, reps, reps[0], reps[0][0], reps[0][0][0])\n    // //     for(let d=0; d<reps.length;d++){\n    // //         for(let f=0; f<reps[d].length; f++){\n    // //             for(let g=0; g<reps[d][f].length; g++){\n    // //                 let color= reps[d][f][g] % 2===0? 'orange':'yellow'\n    // //                 document.getElementsByTagName('input')[reps[d][f][g]].style.color= color\n    // //                 console.log(reps.length, reps[d][f][g], color)\n    // //             }\n    // //         }\n    // //     }\n    //     let par= 0\n    //     // setReps([...reps=[]])\n    //     // console.log(repsRows['subindice'].length)\n    //     for(let aa=0; aa<repsRows.length; aa++){\n    //         let index= repsRows[aa].indice\n    //         for(let a=0; a<repsRows[aa]['subindice'].length; a++){\n    //             let toSave= repsRows[aa]['subindice'][a].reps\n    //             //toSave is an Array, so we must iterate in it to get the wanted square\n    //             sq1= (rows_cols_to_squares(index, toSave[0], 'rows'))\n    //             sq[par]= []\n    //             sq[par].push(sq1)\n    //             sq2= (rows_cols_to_squares(index, toSave[1], 'rows'))\n    //             sq[par].push(sq2)\n    //             document.getElementsByTagName('input')[sq1].style.color= 'red'\n    //             document.getElementsByTagName('input')[sq2].style.color= 'red'\n    //             par++\n    //         }\n    //     }\n    //     setReps([...reps, sq])\n    //     console.log([...reps, sq])\n    //     console.log(repsRows)\n    //     // first= repsRows['indice']\n    //     // for(let a=0; a<repsRows['subindice'].length; a++){\n    //     //     second1= repsRows['subindice'][a][0]\n    //     //     second2= repsRows['subindice'][a][1]\n    //     //     sq1= rows_cols_to_squares(first, second1, 'rows')\n    //     //     sq2= rows_cols_to_squares(first, second2, 'rows')\n    //     // }\n    //     // first= repsRows['indice']\n    //     // second1= repsRows['subindice']['reps'][0]\n    //     // second2= repsRows['subindice']['reps'][1]\n    //     // sq1= rows_cols_to_squares(first, second1, 'rows')\n    //     // sq2= rows_cols_to_squares(first, second2, 'rows')\n    //     // document.getElementsByTagName('input')[sq1].style.color= 'red'\n    //     // document.getElementsByTagName('input')[sq2].style.color= 'red'\n    //     // setReps([...reps, [sq1, sq2]])\n    // }\n    // if(!repsRows && reps.length){\n    //     reps.map((r,e)=> {\n    //         document.getElementsByTagName('input')[reps[e][0]].style.color= 'orange'\n    //         document.getElementsByTagName('input')[reps[e][1]].style.color= 'orange'\n    //     })\n    // }\n    // if(repsRows!== undefined){\n    // sendRepsRows(repsRows)\n    // }\n    // if(repsCols!== undefined){\n    // sendRepsCols(repsCols)\n    // }\n    // if(repsBoxs!== undefined){\n    // sendRepsBoxs(repsBoxs)\n    // }\n    // console.log(filas, 'cols: ', cols, 'boxs: ', boxs)\n\n    if (typeof unity !== 'number' || isNaN(unity)) {\n      console.log(unity, typeof unity, loyalindex);\n      document.getElementsByTagName(\"input\")[loyalindex].value = 0;\n    }\n  } // let [once, setOnce] = useState(false)\n  // if (sending['t'] && !once){\n  //     console.log(sending)\n  //     setOnce(true)\n  // }\n  // document.getElementsByTagName('input')[0].style.color= 'red'\n\n\n  if (carga) {\n    if (unity !== 0) {\n      document.getElementsByTagName(\"input\")[loyalindex].value = unity;\n    }\n\n    if (unity === 0) {\n      document.getElementsByTagName(\"input\")[loyalindex].value = '';\n    } // if(typeof unity !== 'number' || isNaN(unity)){\n    //     console.log(unity, typeof unity, loyalindex)\n    //     document.getElementsByTagName(\"input\")[loyalindex].value= 0\n    // }\n\n  }\n\n  let box_Array = getBoxFromQ(loyalindex);\n  let back = box_Array[0] % 2 === 0 ? 'black' : 'rgb(30,20,10)';\n\n  if (loyalindex === 80) {}\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"Number\" //clave\n      // value= {input[loyalindex]}               //clave\n      // id={repeat ? 'rep':''}\n      ,\n      className: loyalindex % 2 === 0 ? 'unity' : 'impar',\n      style: {\n        backgroundColor: back\n      } // // value= {each}\n      ,\n      onChange: e => changeEach(e) // // name= {each}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Four, \"RZMAJdSb1BsFw+QKDr1fA0nrEtE=\");\n\n_c = Four;\n\nvar _c;\n\n$RefreshReg$(_c, \"Four\");","map":{"version":3,"names":["useState","qubs","update","cols","boxs","restore","poss","detectdifficulty","megasolution","howmanyQubs","pointerMistakes","rows_cols_to_squares","getBoxFromQ","solution","type","Four","unity","rows","loyalindex","carga","sendFill","sendRepsRows","sendRepsCols","sendRepsBoxs","sending","filas","setFilas","reps","setReps","noreps","setNoreps","input","setInput","changeEach","e","val","target","value","console","log","politica1","document","getElementsByTagName","politica2","parseInt","politica3","length","repsRows","repsCols","repsBoxs","indexs","ab","push","ac","squares","i","first","u","second1","second2","sq1","sq2","gamma","style","color","noReps","delta","test","eco","ohmega","isNaN","box_Array","back","backgroundColor"],"sources":["F:/code/SudoQubs/src/components/4-Four.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport '../styles/0-zero.css';\r\nimport { qubs, update, cols, boxs, restore, poss, detectdifficulty, megasolution, howmanyQubs, pointerMistakes, rows_cols_to_squares, getBoxFromQ } from '../functions/2-Estructures.js';\r\nimport { solution } from '../functions/0-Unrepeatable.js';\r\nimport { type } from '@testing-library/user-event/dist/type';\r\n\r\n// const { qubs, update, cols, boxs, restore } = require('../functions/2-Estructures.js');\r\n// const { solution } = require('../functions/0-Unrepeatable.js');\r\n// const { create } = require('../functions/3-Creator.js')\r\n\r\n\r\nexport default function Four({unity, rows, loyalindex, carga, sendFill, sendRepsRows, sendRepsCols, sendRepsBoxs, sending}){\r\n\r\n    //ESTADOS LOCALES\r\n    let [filas, setFilas]= useState(rows)\r\n    let [reps, setReps]= useState([])\r\n    let [noreps, setNoreps]= useState([ ])\r\n    let [input, setInput] = useState({ })\r\n\r\n    //SIMULACION DE setInput\r\n\r\n\r\n    //FUNCIONES\r\n    //Función que se ejecuta por cada ingreso de cualquier caracter en cualquier casilla:\r\n    function changeEach(e){\r\n\r\n        \r\n\r\n        var val= e.target.value\r\n        console.log(\"unity, typeof loyalindex, val\", unity, loyalindex, val)\r\n\r\n\r\n        // if(typeof val === \"string\") return //Si se ingresa una letra, se corta la ejecución (para que las letras no tengan ningún efecto). //Probar esto, escribir la salida acá y borrarla luego de hacer un cambio o de terminar la task. =>\r\n\r\n        function politica1(){if(val===''){\r\n            console.log('1')\r\n            return document.getElementsByTagName(\"input\")[loyalindex].value=''\r\n        }}\r\n        politica1()\r\n        function politica2(){if(parseInt(val)!==parseInt(val) || val==='0' || val==='') { // si no es un número, se desconsidera\r\n            console.log('2')\r\n            document.getElementsByTagName(\"input\")[loyalindex].value=''\r\n            console.log(document.getElementsByTagName(\"input\")[loyalindex].value)\r\n            return\r\n        }}\r\n        politica2()\r\n        function politica3(){if(e.target.value.length > 1) { // si la cadena es mayor a 1, se considera solo el [0]\r\n            politica2()\r\n            console.log('3')\r\n            return document.getElementsByTagName(\"input\")[loyalindex].value= val[0]\r\n        }}\r\n        politica3()\r\n\r\n        // if(parseInt(val)!==val) {\r\n        //     console.log('caí en un pozo')\r\n        //     return\r\n        // }\r\n        //No va a ir, todo es un string dentro de un input.\r\n        //Lo que hay que hacer es parsear la entrada.\r\n        //Si la entrada parseada es igual a la entrada, es número.\r\n        //Si la entrada parseada es desigual a la entrada, es string, return.\r\n        //TODO ARRIBA DE ESTE GRUPO DE COMENTARIOS\r\n\r\n        if(val===''){ //Si se borra un numero va a llegar un string vacío\r\n            unity= 0\r\n        }\r\n        if(val!==''){\r\n            unity= parseInt(val)\r\n        }\r\n        qubs[loyalindex]= unity\r\n        setFilas(update(loyalindex))\r\n        sendFill(howmanyQubs(rows))\r\n        // console.log(\"megasolution\", megasolution()[rows])\r\n        let repsRows=pointerMistakes('rows', megasolution(2), 2)\r\n        let repsCols=pointerMistakes('cols', megasolution())\r\n        let repsBoxs=pointerMistakes('boxs', megasolution())\r\n\r\n        console.log(repsRows)\r\n\r\n        let indexs= []\r\n        for(let ab= 0; ab< repsRows.length; ab++){\r\n            indexs[ab]= []\r\n            indexs[ab].push(repsRows[ab]['indice'])\r\n            for(let ac= 0; ac< repsRows[ab]['subindice'].length; ac++){\r\n                // console.log(repsRows[ab]['subindice'][ac]) //ÍNDICES\r\n                indexs[ab].push(repsRows[ab]['subindice'][ac]['reps'])\r\n            }\r\n        }\r\n        console.log( indexs)\r\n        let squares= []\r\n        for (let i = 0; i < indexs.length; i++) {\r\n            let first= indexs[i][0]\r\n            console.log('first', first)\r\n            for (let u=1;u<indexs[i].length;u++) {\r\n                let second1= indexs[i][u][0]\r\n                let second2= indexs[i][u][1]\r\n                console.log('second', second1, second2)\r\n                let sq1= rows_cols_to_squares(first, second1, 'rows')\r\n                let sq2= rows_cols_to_squares(first, second2, 'rows')\r\n                squares.push(sq1, sq2)\r\n            }\r\n        }\r\n        console.log(squares)\r\n        //HASTA ACÄ TODO 10 PUNTOS\r\n\r\n        //ANTES HAY QUE HACER LA COMPARACIÓN ENTRE useState() Y pointerMistakes()\r\n        //EN BASE A ESO, MANDAR A PINTAR Y MANDAR A DESPINTAR\r\n        for(let gamma= 0; gamma<squares.length; gamma++){\r\n            // console.log(squares[gamma][0])\r\n            // console.log(squares[gamma][1])\r\n            document.getElementsByTagName('input')[squares[gamma]].style.color= 'red'\r\n            document.getElementsByTagName('input')[squares[gamma]].style.color= 'red'\r\n        }\r\n        //Y PUDIERA SER QUE HASTA ACÁ, PERFECTO TAMBIÉN\r\n\r\n        //LO QUE VIENE AHORA SERÍA LO RECIÉN MENCIONADO SOBRE COMPARAR PARA DESPINTAR\r\n        //TRAEME useState() que contiene lo de la anterior vuelta, (1)\r\n        //SI ES DISTINTO DE VACÍO, LO ANALIZAMOS. (2)\r\n        //Recordar que useState() siempre va a guardar todos los datos que le mandemos.\r\n        //Si nada los borra, quedan ahí. Entonces:\r\n        //SI useState() PRESENTA DATOS DE pointerMistakes(), IGNORAR ESTOS (3)\r\n        //SI PRESENTA DATOS QUE pointerMistakes() NO REGISTRÓ, DESPINTARLOS (4)\r\n\r\n        //Nota: al mencionar pointerMistakes(), hacemos referencia al post-producto: es decir los squares que están dentro del Array squares\r\n\r\n        let noReps= []\r\n        // if(reps.length){ //(1), (2)\r\n            for(let delta=0;delta<reps.length;delta++){\r\n                let test=[]\r\n                let e= 0\r\n                for(let eco=0;eco<squares.length;eco++){\r\n                    // if(eco===delta)continue\r\n                    // if(reps[delta][0]===squares[eco][0]){\r\n                    //     console.log('continue en 0')\r\n                    // }\r\n                    // if(reps[delta][1]===squares[eco][1]){\r\n                    //     console.log('continue en 1')\r\n                    // }\r\n                    if(reps[delta]===squares[eco]){\r\n                        // console.log(reps[delta, squares[eco]], ' iguales')\r\n                        test.push(1)\r\n                    }\r\n                    e= eco\r\n                    // if(!test.length && e===squares.length-1){\r\n                    //     noReps.push(reps[delta])\r\n                    // }\r\n                }\r\n                if(!test.length){\r\n                    noReps.push(reps[delta])\r\n                }\r\n            }\r\n        // }\r\n        console.log(reps, squares, noReps)\r\n        for(let ohmega=0; ohmega< noReps.length; ohmega++){\r\n            let color= noReps[ohmega] % 2===0? 'orange':'orangered'\r\n            console.log(noReps[ohmega], color)\r\n            document.getElementsByTagName('input')[noReps[ohmega]].style.color= color\r\n        }\r\n        setReps(squares)\r\n\r\n        // setNoreps(...noreps)\r\n\r\n\r\n        //LO ÚLTIMO POR HACER ES EL SET DEL STATE\r\n\r\n        // let first, second1, second2, sq=[], sq1, sq2\r\n\r\n        // // if(typeof repsRows==='object'){\r\n        // if(repsRows.length){\r\n        // //     // console.log(repsRows, reps, reps[0], reps[0][0], reps[0][0][0])\r\n        // //     for(let d=0; d<reps.length;d++){\r\n        // //         for(let f=0; f<reps[d].length; f++){\r\n        // //             for(let g=0; g<reps[d][f].length; g++){\r\n        // //                 let color= reps[d][f][g] % 2===0? 'orange':'yellow'\r\n        // //                 document.getElementsByTagName('input')[reps[d][f][g]].style.color= color\r\n        // //                 console.log(reps.length, reps[d][f][g], color)\r\n\r\n        // //             }\r\n        // //         }\r\n        // //     }\r\n        //     let par= 0\r\n        //     // setReps([...reps=[]])\r\n        //     // console.log(repsRows['subindice'].length)\r\n        //     for(let aa=0; aa<repsRows.length; aa++){\r\n        //         let index= repsRows[aa].indice\r\n        //         for(let a=0; a<repsRows[aa]['subindice'].length; a++){\r\n        //             let toSave= repsRows[aa]['subindice'][a].reps\r\n        //             //toSave is an Array, so we must iterate in it to get the wanted square\r\n        //             sq1= (rows_cols_to_squares(index, toSave[0], 'rows'))\r\n        //             sq[par]= []\r\n        //             sq[par].push(sq1)\r\n        //             sq2= (rows_cols_to_squares(index, toSave[1], 'rows'))\r\n        //             sq[par].push(sq2)\r\n        //             document.getElementsByTagName('input')[sq1].style.color= 'red'\r\n        //             document.getElementsByTagName('input')[sq2].style.color= 'red'\r\n        //             par++\r\n        //         }\r\n        //     }\r\n        //     setReps([...reps, sq])\r\n        //     console.log([...reps, sq])\r\n        //     console.log(repsRows)\r\n\r\n        //     // first= repsRows['indice']\r\n        //     // for(let a=0; a<repsRows['subindice'].length; a++){\r\n        //     //     second1= repsRows['subindice'][a][0]\r\n        //     //     second2= repsRows['subindice'][a][1]\r\n        //     //     sq1= rows_cols_to_squares(first, second1, 'rows')\r\n        //     //     sq2= rows_cols_to_squares(first, second2, 'rows')\r\n        //     // }\r\n\r\n        //     // first= repsRows['indice']\r\n        //     // second1= repsRows['subindice']['reps'][0]\r\n        //     // second2= repsRows['subindice']['reps'][1]\r\n        //     // sq1= rows_cols_to_squares(first, second1, 'rows')\r\n        //     // sq2= rows_cols_to_squares(first, second2, 'rows')\r\n        //     // document.getElementsByTagName('input')[sq1].style.color= 'red'\r\n        //     // document.getElementsByTagName('input')[sq2].style.color= 'red'\r\n\r\n        //     // setReps([...reps, [sq1, sq2]])\r\n        // }\r\n        // if(!repsRows && reps.length){\r\n        //     reps.map((r,e)=> {\r\n        //         document.getElementsByTagName('input')[reps[e][0]].style.color= 'orange'\r\n        //         document.getElementsByTagName('input')[reps[e][1]].style.color= 'orange'\r\n        //     })\r\n        // }\r\n\r\n        // if(repsRows!== undefined){\r\n            // sendRepsRows(repsRows)\r\n        // }\r\n        // if(repsCols!== undefined){\r\n            // sendRepsCols(repsCols)\r\n        // }\r\n        // if(repsBoxs!== undefined){\r\n            // sendRepsBoxs(repsBoxs)\r\n        // }\r\n        // console.log(filas, 'cols: ', cols, 'boxs: ', boxs)\r\n\r\n        if(typeof unity !== 'number' || isNaN(unity)){\r\n            console.log(unity, typeof unity, loyalindex)\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= 0\r\n        }\r\n\r\n    }\r\n\r\n    // let [once, setOnce] = useState(false)\r\n    // if (sending['t'] && !once){\r\n    //     console.log(sending)\r\n    //     setOnce(true)\r\n    // }\r\n    // document.getElementsByTagName('input')[0].style.color= 'red'\r\n\r\n\r\n    if (carga) {\r\n        if(unity!==0){\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= unity\r\n        }\r\n        if(unity===0){\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= ''\r\n        }\r\n        // if(typeof unity !== 'number' || isNaN(unity)){\r\n        //     console.log(unity, typeof unity, loyalindex)\r\n        //     document.getElementsByTagName(\"input\")[loyalindex].value= 0\r\n        // }\r\n    }\r\n\r\n    let box_Array= getBoxFromQ(loyalindex)\r\n    let back= box_Array[0]%2===0? 'black' : 'rgb(30,20,10)'\r\n    \r\n    if(loyalindex===80){\r\n    }\r\n\r\n    return (\r\n            <span >\r\n                <input type='text'\r\n                name=\"Number\"                       //clave\r\n                // value= {input[loyalindex]}               //clave\r\n                // id={repeat ? 'rep':''}\r\n                className=\r\n                // {(prop%9!== 0 && prop%3 === 0)?'border': (divis === 3 || divis === 6)? 'under':\r\n                {loyalindex%2===0?'unity':'impar'}\r\n                style={{backgroundColor: back}}\r\n                // // value= {each}\r\n                onChange= {e=>changeEach(e)}\r\n                // // name= {each}\r\n                />\r\n            </span>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}