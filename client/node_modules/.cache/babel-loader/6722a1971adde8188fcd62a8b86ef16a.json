{"ast":null,"code":"import { solution } from \"./0-Unrepeatable.js\"; // const {solution} = require('../functions/0-Unrepeatable.js');// import { solution } from \"./0-Unrepeatable\"\n// import { boxs, cols, poss, qubs, resetSquare, rows, update, updateBox, updateCol, updateRow } from \"./2-Estructures\";\n// poss()\n\nlet cols, boxs, rows;\nrows = [];\n\nfor (let r = 0; r < 9; r++) {\n  rows[r] = [];\n}\n\ncols = [];\n\nfor (let c = 0; c < 9; c++) {\n  cols[c] = [];\n}\n\nboxs = [];\n\nfor (let b = 0; b < 9; b++) {\n  boxs[b] = [];\n}\n\nlet qubs;\nqubs = [];\n\nfor (let q = 1; q <= 81; q++) {\n  qubs.push(0);\n} // _________________________________________\n\n/* Funciones auxiliares usadas para updatear */\n\n\nfunction floor(a, b) {\n  return Math.floor(a / b);\n}\n\nfunction modul(a, b) {\n  return a % b;\n} // _________________________________________\n\n\nfunction updateCol(inx) {\n  cols[modul(inx, 9)][floor(inx, 9)] = qubs[inx];\n  return qubs[inx];\n}\n\nfunction updateRow(inx) {\n  rows[floor(inx, 9)][modul(inx, 9)] = qubs[inx];\n  return qubs[inx];\n}\n\nfunction updateBox(q) {\n  var gross = Math.floor(q / 9); //indica el numero de fila\n  //calculamos el index vertical\n\n  var index = Math.floor(gross / 3); //este da 0, 1 ó 2\n  //lo usamos para calcular el box exacto al cual pertenecerá\n\n  var module = q % 9;\n  var foundbox = Math.floor(module / 3) + index * 3; //índice del box -> 0 al 8\n\n  let indexbox = (Math.floor(q / 9) * 3 + q % 3) % 9; //índice puntual -> 0 al 8\n\n  boxs[foundbox][indexbox] = qubs[q];\n  return `boxs[${foundbox}][${indexbox}], actualizado: ${boxs[foundbox][indexbox]}`;\n} //Exportables solo las siguientes functions\n\n\nconst update = q => {\n  updateBox(q);\n  updateCol(q);\n  updateRow(q);\n};\n\nfunction resetSquare(q) {\n  qubs[q] = 0;\n  updateBox(q);\n  updateCol(q);\n  updateRow(q);\n} // (\n\n\nfunction possCols() {\n  //possCols\n  //    pseudo \n  //    tengo que agarrar qubs que va del 1 al 81\n  //    hacer iteraciones de 0 a 8\n  //    a todos los 0, mandarlos al indice cols[0]\n  //    a todos los 8, mandarlos al indice cols[8]\n  var ochouno = 0;\n\n  for (let alfa = 0; alfa <= 8; alfa++) {\n    for (let beta = 0; beta <= 8; beta++) {\n      cols[beta][alfa] = qubs[ochouno]; //intercambiando los índices beta y alfa entre sí conseguimos columna o fila según se requiera\n\n      ochouno++;\n    }\n  }\n\n  return cols;\n} // (\n// \n\n\nfunction possRows() {\n  //\n  var ochouno = 0;\n\n  for (let alfa = 0; alfa <= 8; alfa++) {\n    for (let beta = 0; beta <= 8; beta++) {\n      rows[alfa][beta] = qubs[ochouno];\n      ochouno++;\n    }\n  }\n\n  return rows;\n} // )()\n//inicializamos la funcion\n// (\n// function possBoxs() { //\n//     var gross\n//     var index\n//     var exact\n// //iteramos en los 81 Squares\n//     for (let q= 0; q< 81; q++) {\n// //lo dividimos entre 9 redondeado abajo\n//         gross= Math.floor(q / 9) //indica el numero de fila\n// //calculamos el index vertical\n//         index= Math.floor(gross / 3) //este da 0, 1 ó 2\n// //lo usamos para calcular el box exacto al cual pertenecerá\n//         var module= (q % 9) \n//         exact= Math.floor(module / 3) + index * 3\n//         boxs[exact].push(qubs[q])\n//     }\n//     // return boxs\n// }\n\n\nfunction possBoxs() {\n  for (let a = 0; a < 81; a++) {\n    updateBox(a);\n  }\n\n  return boxs;\n} // update()\n\n\nfunction poss() {\n  for (let a = 0; a < 81; a++) {\n    update(a);\n  }\n}\n\nfunction possRandC(boxs) {\n  possCols();\n  possRows();\n  boxs = possCols();\n  console.log(boxs);\n}\n\nfunction restore() {\n  for (let a = 0; a < 81; a++) {\n    resetSquare(a);\n  }\n}\n\nfunction updateEvery() {\n  for (let a = 0; a < 81; a++) {\n    update(a);\n  }\n}\n\nfunction megasolution(quantity) {\n  let b = [];\n  let c = [];\n  let r = [];\n\n  for (let a = 0; a < 9; a++) {\n    r.push(solution(rows[a], quantity));\n    c.push(solution(cols[a], quantity));\n    b.push(solution(boxs[a], quantity));\n  }\n\n  let concat = {\n    rows: r,\n    boxs: b,\n    cols: c\n  };\n  return concat;\n}\n\nfunction megasolutionBy(entity, quantity) {\n  let b = [];\n  let c = [];\n  let r = [];\n  let concat;\n\n  for (let a = 0; a < 9; a++) {\n    if (entity === 'rows') r.push(solution(rows[a], quantity));\n    concat = r;\n    if (entity === 'cols') c.push(solution(cols[a], quantity));\n    concat = c;\n    if (entity === 'boxs') b.push(solution(boxs[a], quantity));\n    concat = b;\n  }\n\n  return concat;\n}\n\nfunction pointerMistakes(entityString, concat, quantity) {\n  let response = [];\n  let e = concat[entityString];\n\n  for (let a = 0; a < e.length; a++) {\n    if (e[a] !== -1) {\n      response.push({\n        indice: a,\n        subindice: e[a]\n      });\n    }\n  }\n\n  if (quantity > 1) {\n    return response;\n  }\n\n  if (!quantity || quantity === 1) {\n    return [response[0]];\n  }\n}\n\nfunction detectdifficulty(qubs) {\n  let cont = [];\n\n  for (let a = 0; a < 81; a++) {\n    if (qubs[a] !== 0) {\n      cont.push(a);\n    }\n  }\n\n  return cont;\n}\n\nfunction updateEveryCols() {\n  //Hace un bucle de 81 iteraciones para actualizar las cols respecto a los qubs\n  for (let b = 0; b < 81; b++) updateCol(b);\n}\n\nfunction updateQubsBy(what) {\n  var q = 0;\n  var qubes = [];\n\n  for (let aa = 0; aa < 9; aa++) {\n    for (let a = 0; a < 9; a++) {\n      if (what === \"rows\") {\n        qubes.push(rows[aa][a]);\n      }\n\n      if (what === \"cols\") {\n        qubes.push(cols[a][aa]);\n      }\n\n      if (what === \"boxs\") {\n        var gross = Math.floor(q / 9); //indica el numero de fila\n\n        var index = Math.floor(gross / 3); //este da 0, 1 ó 2\n\n        var module = q % 9;\n        let indexbox = (Math.floor(q / 9) * 3 + q % 3) % 9; //índice puntual -> 0 al 8\n\n        var foundbox = Math.floor(module / 3) + index * 3; //índice del box -> 0 al 8\n\n        qubes.push(boxs[foundbox][indexbox]);\n        q++;\n      }\n    }\n  }\n\n  return qubes;\n}\n\nfunction create3() {\n  var molino = 0;\n  var ochouno = 0;\n  let setRows = new Set();\n  let setBoxs = new Set();\n  let theSet = new Set();\n\n  for (let aa = 0; aa < 9; aa++) {\n    for (let a = 0; a < 9; a++) {\n      molino++;\n      let random = Math.ceil(Math.random() * 9);\n      rows[aa][a] = random; // if (a > 0){\n\n      if (solution(rows[aa]) !== -1) {\n        setRows.add(random);\n\n        if (setRows.size >= 9) {\n          // rows[aa][a]= 0\n          // console.log(\"set a 9 en rows\",theSet)\n          // console.log(setRows, aa, a, random, ochouno, 'rows == 9', rows[aa])     \n          setBoxs = new Set();\n          setRows = new Set();\n          rows[aa] = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n          qubs = updateQubsBy(\"rows\");\n\n          for (let b = 0; b < 9; b++) {\n            updateBox(aa * 9 + b);\n            updateCol(aa * 9 + b);\n          }\n\n          ochouno = aa * 9;\n          a = -1;\n          continue;\n        } // console.log(setRows, aa, a, random, ochouno, 'rows', rows[aa])     \n\n\n        a = a - 1;\n        continue;\n      } // }\n\n\n      cols[a][aa] = random;\n\n      if (aa > 0) {\n        if (solution(cols[a]) !== -1) {\n          setRows.add(random);\n\n          if (setRows.size >= 9) {\n            // rows[aa][a]= 0\n            // console.log(\"set a 9 en rows\",theSet)\n            // console.log(setRows, aa, a, random, ochouno, 'rows == 9', rows[aa])     \n            setBoxs = new Set();\n            setRows = new Set();\n            rows[aa] = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n            qubs = updateQubsBy(\"rows\");\n\n            for (let b = 0; b < 9; b++) {\n              updateBox(aa * 9 + b);\n              updateCol(aa * 9 + b);\n            }\n\n            ochouno = aa * 9;\n            a = -1;\n            continue;\n          } // console.log(setRows, aa, a, random, ochouno, 'rows', rows[aa])     \n\n\n          a = a - 1;\n          continue;\n        }\n      } // console.log(\"pasé los continue\")\n      // }\n\n\n      var q = ochouno;\n      var gross = Math.floor(q / 9); //indica el numero de fila\n\n      var index = Math.floor(gross / 3); //este da 0, 1 ó 2\n\n      var module = q % 9;\n      let indexbox = (Math.floor(q / 9) * 3 + q % 3) % 9; //índice puntual -> 0 al 8\n\n      var foundbox = Math.floor(module / 3) + index * 3; //índice del box -> 0 al 8\n\n      boxs[foundbox][indexbox] = random; // if( indexbox > 0 ) {\n\n      if (solution(boxs[foundbox]) !== -1) {\n        setRows.add(random);\n        boxs[foundbox][indexbox] = 0; // console.log(setRows, aa, a, random, ochouno)                    \n\n        if (setRows.size >= 9) {\n          setBoxs = new Set();\n          setRows = new Set();\n          rows[aa] = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n          qubs = updateQubsBy(\"rows\");\n\n          for (let b = 0; b < 9; b++) {\n            updateBox(aa * 9 + b);\n            updateCol(aa * 9 + b);\n          }\n\n          ochouno = aa * 9;\n          a = -1; // ochouno= aa * 9\n\n          continue;\n        }\n\n        a = a - 1; // ochouno--\n\n        continue;\n      } // }\n\n\n      if (\n      /*solution(cols[a ])=== -1 &&*/\n      solution(rows[aa]) === -1) {\n        rows[aa][a] = random; // cols[a][aa]= random\n      }\n\n      ochouno++;\n      setBoxs = new Set();\n      setRows = new Set();\n    }\n\n    theSet = new Set();\n  }\n\n  return {\n    ok: \"ok\",\n    molino\n  };\n}\n\nfunction difficult(level) {\n  var coef = level * 0.4 + 5;\n  var diff = Math.random() * 15;\n  var float = parseFloat(diff.toString().slice(0, 3));\n\n  if (float > coef) {\n    return true; //se busca un numero\n  }\n\n  return false; //no se busca nada\n}\n\nfunction sudoqubs(level, entity) {\n  var suerte;\n  var array = [];\n\n  for (let index = 0; index < 9; index++) {\n    for (let ii = 0; ii < 9; ii++) {\n      suerte = difficult(level);\n\n      if (!suerte) {\n        entity[index][ii] = 0;\n        array.push(index);\n      }\n    }\n  }\n\n  return array.length;\n}\n\nfunction howmanyQubs(rows) {\n  let cont = [];\n\n  for (let a = 0; a < rows.length; a++) {\n    for (let b = 0; b < rows[a].length; b++) {\n      if (rows[a][b] !== 0) {\n        cont.push(rows[a][b]);\n      }\n    }\n  }\n\n  return cont.length;\n}\n\nfunction rows_cols_to_squares(first, second, rowsORcols) {\n  function dependsWhom(dominante, calibrador) {\n    return dominante * 9 + calibrador;\n  }\n\n  if (rowsORcols === 'rows') {\n    return dependsWhom(first, second);\n  }\n\n  if (rowsORcols === 'cols') {\n    return dependsWhom(second, first);\n  }\n}\n\nfunction boxs_to_squares(box, index) {\n  return Math.floor(index / 3) * 9 + index % 3 + box % 3 * 3 + Math.floor(box / 3) * 3 * 9;\n}\n\nfunction getBoxFromQ(q) {\n  var gross = Math.floor(q / 9); //indica el numero de fila\n  //calculamos el index vertical\n\n  var index = Math.floor(gross / 3); //este da 0, 1 ó 2\n  //lo usamos para calcular el box exacto al cual pertenecerá\n\n  var module = q % 9;\n  var foundbox = Math.floor(module / 3) + index * 3; //índice del box -> 0 al 8\n\n  let indexbox = (Math.floor(q / 9) * 3 + q % 3) % 9; //índice puntual -> 0 al 8\n  // boxs[foundbox][indexbox] = qubs[q]\n\n  return [foundbox, indexbox];\n}\n\nposs(); // Relaciona las filas, columnas y cajas entre sí\n\nrestore(); // Reinicia el sudoku: borrando los datos de las filas, columnas y cajas\n\nlet sudoku = create3(); // En la variable sudoku se guarda un objeto así: {ok: 'ok', molino: number}\n// La propiedad ok es para confirmar que salió bien y sin errores, la propiedad molino muestra la cantidad\n// de iteraciones que se realizaron para crear el sudoku\n// create3() genera el sudoku, guardando el rows, cols, y boxs los datos\n// Solo con el Array rows ya podemos desplegar el sudoku en el browser\n\nsudoqubs(5, rows); // Esta función es la que borra ciertos números, según cuántos se borran, se define la dificulad\n\nqubs = updateQubsBy(\"rows\"); // Qubs es un Array de 81 casilleros, con esta función le pasamos los datos de rows a qubs\n\nupdateEvery(); // Relaciona las filas, columnas y cajas entre sí, cada vez que se agregue un número cuando se estpe jugando al sudoku, es necesario ejecutar una variante de esta función. \n\nexport { //Para testing\nrows, cols, boxs, qubs, updateRow, updateCol, updateBox, //Para update\nupdate, //Para reset\nresetSquare, //Para crear estructura sudoku\npossCols, possRows, possBoxs, poss, possRandC, restore, detectdifficulty, megasolution, create3, updateQubsBy, difficult, //Para crear sudoku lógico:\nsudoku, //Registro de sudoku:\nhowmanyQubs, //Registro errores:\npointerMistakes, //Conversores inversos:\nboxs_to_squares, rows_cols_to_squares, //conversor regular\ngetBoxFromQ };","map":{"version":3,"names":["solution","cols","boxs","rows","r","c","b","qubs","q","push","floor","a","Math","modul","updateCol","inx","updateRow","updateBox","gross","index","module","foundbox","indexbox","update","resetSquare","possCols","ochouno","alfa","beta","possRows","possBoxs","poss","possRandC","console","log","restore","updateEvery","megasolution","quantity","concat","megasolutionBy","entity","pointerMistakes","entityString","response","e","length","indice","subindice","detectdifficulty","cont","updateEveryCols","updateQubsBy","what","qubes","aa","create3","molino","setRows","Set","setBoxs","theSet","random","ceil","add","size","ok","difficult","level","coef","diff","float","parseFloat","toString","slice","sudoqubs","suerte","array","ii","howmanyQubs","rows_cols_to_squares","first","second","rowsORcols","dependsWhom","dominante","calibrador","boxs_to_squares","box","getBoxFromQ","sudoku"],"sources":["F:/code/SudoQubs/src/functions/2-Estructures.js"],"sourcesContent":["import { solution } from \"./0-Unrepeatable.js\";\r\n// const {solution} = require('../functions/0-Unrepeatable.js');// import { solution } from \"./0-Unrepeatable\"\r\n// import { boxs, cols, poss, qubs, resetSquare, rows, update, updateBox, updateCol, updateRow } from \"./2-Estructures\";\r\n// poss()\r\n\r\nlet cols, boxs ,rows\r\n\r\n    rows= []\r\n    for (let r= 0; r< 9; r++){\r\n        rows[r]= []\r\n    }\r\n\r\n    cols= []\r\n    for (let c= 0; c< 9; c++){\r\n        cols[c]= []\r\n    }\r\n\r\n    boxs= []\r\n    for (let b= 0; b< 9; b++){\r\n        boxs[b]= []\r\n    }\r\n\r\nlet qubs\r\n\r\n    qubs= []\r\n    for (let q= 1; q<= 81; q++){\r\n        qubs.push(0)\r\n    }\r\n    \r\n// _________________________________________\r\n/* Funciones auxiliares usadas para updatear */\r\nfunction floor (a,b) { \r\n    return Math.floor(a/b)\r\n}\r\nfunction modul (a,b) {\r\n    return a % b\r\n}\r\n// _________________________________________\r\n\r\nfunction updateCol(inx) {\r\n    cols[modul(inx,9)][floor(inx,9)]= qubs[inx]\r\n    return qubs[inx]\r\n}\r\n\r\nfunction updateRow(inx) {\r\n    rows[floor(inx,9)][modul(inx,9)]= qubs[inx]\r\n    return qubs[inx]\r\n}\r\n\r\nfunction updateBox(q) {\r\n        \r\n    var gross= Math.floor(q / 9) //indica el numero de fila\r\n//calculamos el index vertical\r\n    var index= Math.floor(gross / 3) //este da 0, 1 ó 2\r\n//lo usamos para calcular el box exacto al cual pertenecerá\r\n    var module= (q % 9) \r\n\r\n    var foundbox= Math.floor(module / 3) + index * 3 //índice del box -> 0 al 8\r\n    let indexbox = (Math.floor(q/9)*3 + q%3) %9 //índice puntual -> 0 al 8\r\n    \r\n    boxs[foundbox][indexbox] = qubs[q]\r\n\r\n    return `boxs[${foundbox}][${indexbox}], actualizado: ${boxs[foundbox][indexbox]}`\r\n\r\n}\r\n//Exportables solo las siguientes functions\r\nconst update = (q) => {\r\n    updateBox(q)\r\n    updateCol(q)\r\n    updateRow(q)\r\n}\r\n\r\nfunction resetSquare(q) {\r\n    qubs[q]= 0\r\n    updateBox(q)\r\n    updateCol(q)\r\n    updateRow(q)\r\n}\r\n\r\n\r\n// (\r\nfunction possCols (){//possCols\r\n\r\n    //    pseudo \r\n    //    tengo que agarrar qubs que va del 1 al 81\r\n    //    hacer iteraciones de 0 a 8\r\n    //    a todos los 0, mandarlos al indice cols[0]\r\n    //    a todos los 8, mandarlos al indice cols[8]\r\n    \r\n    var ochouno= 0\r\n\r\n    for(let alfa= 0; alfa <= 8; alfa++) {\r\n        for(let beta= 0; beta <= 8; beta++) {\r\n            cols[beta][alfa]= qubs[ochouno] //intercambiando los índices beta y alfa entre sí conseguimos columna o fila según se requiera\r\n            ochouno++\r\n        }\r\n    }\r\n\r\n    return cols\r\n}\r\n    \r\n    // (\r\n    // \r\nfunction possRows(){//\r\n\r\n    var ochouno= 0\r\n\r\n    for(let alfa= 0; alfa <= 8; alfa++) {\r\n        for(let beta= 0; beta <= 8; beta++) {\r\n            rows[alfa][beta]= qubs[ochouno] \r\n            ochouno++\r\n        }\r\n    }\r\n\r\n    return rows\r\n}\r\n    // )()\r\n    \r\n    //inicializamos la funcion\r\n    // (\r\n    // function possBoxs() { //\r\n    //     var gross\r\n    //     var index\r\n    //     var exact\r\n    // //iteramos en los 81 Squares\r\n    //     for (let q= 0; q< 81; q++) {\r\n    // //lo dividimos entre 9 redondeado abajo\r\n    //         gross= Math.floor(q / 9) //indica el numero de fila\r\n    // //calculamos el index vertical\r\n    //         index= Math.floor(gross / 3) //este da 0, 1 ó 2\r\n    // //lo usamos para calcular el box exacto al cual pertenecerá\r\n    //         var module= (q % 9) \r\n    //         exact= Math.floor(module / 3) + index * 3\r\n    //         boxs[exact].push(qubs[q])\r\n    //     }\r\n    //     // return boxs\r\n    // }\r\n\r\nfunction possBoxs(){\r\n    for (let a= 0; a < 81; a++) {\r\n        updateBox(a)\r\n    }\r\n    return boxs\r\n}\r\n// update()\r\nfunction poss(){\r\n    for (let a= 0; a < 81; a++) {\r\n        update(a)\r\n    }\r\n}\r\n\r\nfunction possRandC(boxs){\r\n    possCols()\r\n    possRows()\r\n    boxs= possCols()\r\n    console.log(boxs)\r\n}\r\n\r\nfunction restore(){\r\n    for (let a= 0; a < 81; a++) {\r\n        resetSquare(a)\r\n    }\r\n}\r\n\r\nfunction updateEvery(){\r\n    for (let a= 0; a < 81; a++) {\r\n        update(a)\r\n    }\r\n}\r\n\r\nfunction megasolution(quantity){\r\n    let b= []\r\n    let c=[]\r\n    let r=[]\r\n    for (let a= 0; a < 9; a++) {\r\n        r.push(solution(rows[a], quantity)) \r\n        c.push(solution(cols[a], quantity)) \r\n        b.push(solution(boxs[a], quantity)) \r\n    }\r\n    let concat= {rows: r, boxs: b, cols: c}\r\n    return concat\r\n}\r\n\r\nfunction megasolutionBy(entity, quantity){\r\n    let b= []\r\n    let c=[]\r\n    let r=[]\r\n    let concat\r\n    for (let a= 0; a < 9; a++) {\r\n        if(entity==='rows') r.push(solution(rows[a], quantity)) ; concat= r\r\n        if(entity==='cols') c.push(solution(cols[a], quantity)) ; concat= c\r\n        if(entity==='boxs') b.push(solution(boxs[a], quantity)) ; concat= b\r\n    }\r\n    return concat\r\n}\r\n\r\n\r\nfunction pointerMistakes(entityString, concat, quantity){\r\n    \r\n    let response= []\r\n    let e= concat[entityString]\r\n    for(let a=0; a<e.length; a++){\r\n        if(e[a]!==-1){\r\n            response.push({\r\n                indice: a,\r\n                subindice: e[a]\r\n            })\r\n        }\r\n    }\r\n    if(quantity> 1){\r\n        return response\r\n    }\r\n    if(!quantity || quantity===1){\r\n        return [response[0]]\r\n    }\r\n}\r\n\r\nfunction detectdifficulty(qubs){\r\n    let cont=[]\r\n    for(let a=0;a<81;a++){\r\n        if(qubs[a]!==0){\r\n            cont.push(a)\r\n        }\r\n    }\r\n    return cont\r\n}\r\nfunction updateEveryCols(){ //Hace un bucle de 81 iteraciones para actualizar las cols respecto a los qubs\r\n    for(let b=0;b<81;b++) updateCol(b) \r\n}\r\n\r\n\r\nfunction updateQubsBy(what){\r\n    var q= 0\r\n    var qubes= []\r\n    for(let aa= 0; aa < 9; aa++){\r\n        for(let a= 0; a < 9; a++){\r\n            if(what===\"rows\") {\r\n                qubes.push(rows[aa][a])\r\n            }\r\n            if(what===\"cols\") {\r\n                qubes.push(cols[a][aa])\r\n            }\r\n            if(what===\"boxs\") {\r\n                var gross= Math.floor(q / 9) //indica el numero de fila\r\n                var index= Math.floor(gross / 3) //este da 0, 1 ó 2\r\n                var module= (q % 9)\r\n                let indexbox = (Math.floor(q/9)*3 + q%3) %9 //índice puntual -> 0 al 8\r\n                var foundbox= Math.floor(module / 3) + index * 3 //índice del box -> 0 al 8\r\n                qubes.push(boxs[foundbox][indexbox])\r\n                q++\r\n            }            \r\n        }\r\n    }\r\n    return qubes\r\n}\r\n\r\n\r\n\r\nfunction create3(){\r\n    var molino= 0\r\n    var ochouno= 0\r\n    let setRows= new Set()\r\n    let setBoxs= new Set()\r\n    let theSet= new Set() \r\n    for (let aa= 0; aa < 9; aa++) {\r\n        for (let a= 0; a < 9; a++) {\r\n            molino++\r\n            let random= Math.ceil( Math.random() * 9 ) \r\n            rows[aa][a]= random\r\n            // if (a > 0){\r\n                if ( solution( rows[aa] ) !== -1 ) {\r\n                    setRows.add(random)             \r\n                    if(setRows.size >= 9) {\r\n                        // rows[aa][a]= 0\r\n                        // console.log(\"set a 9 en rows\",theSet)\r\n                        // console.log(setRows, aa, a, random, ochouno, 'rows == 9', rows[aa])     \r\n                        setBoxs= new Set()\r\n                        setRows= new Set()\r\n                        rows[aa]= [0,0,0,  0,0,0,  0,0,0]\r\n                        qubs= updateQubsBy(\"rows\")\r\n                        for(let b=0;b<9;b++){\r\n                            updateBox((aa * 9) +b)\r\n                            updateCol((aa * 9) +b)\r\n                        }\r\n                        ochouno= aa* 9\r\n                        a= -1\r\n                        continue\r\n                    }\r\n                    // console.log(setRows, aa, a, random, ochouno, 'rows', rows[aa])     \r\n                    a= a-1\r\n                    continue\r\n                }\r\n            // }\r\n            cols[a][aa]= random\r\n            if (aa > 0){\r\n                if ( solution( cols[a] ) !== -1 ) {\r\n                    setRows.add(random)             \r\n                    if(setRows.size >= 9) {\r\n                        // rows[aa][a]= 0\r\n                        // console.log(\"set a 9 en rows\",theSet)\r\n                        // console.log(setRows, aa, a, random, ochouno, 'rows == 9', rows[aa])     \r\n                        setBoxs= new Set()\r\n                        setRows= new Set()\r\n                        rows[aa]= [0,0,0,  0,0,0,  0,0,0]\r\n                        qubs= updateQubsBy(\"rows\")\r\n                        for(let b=0;b<9;b++){\r\n                            updateBox((aa * 9) +b)\r\n                            updateCol((aa * 9) +b)\r\n                        }\r\n                        ochouno= aa* 9\r\n                        a= -1\r\n                        continue\r\n                    }\r\n                    // console.log(setRows, aa, a, random, ochouno, 'rows', rows[aa])     \r\n                    a= a-1\r\n                    continue\r\n                }\r\n            }\r\n                // console.log(\"pasé los continue\")\r\n            // }\r\n\r\n            var q= ochouno\r\n            var gross= Math.floor(q / 9) //indica el numero de fila\r\n            var index= Math.floor(gross / 3) //este da 0, 1 ó 2\r\n            var module= (q % 9)\r\n            let indexbox = (Math.floor(q/9)*3 + q%3) %9 //índice puntual -> 0 al 8\r\n            var foundbox= Math.floor(module / 3) + index * 3 //índice del box -> 0 al 8\r\n            boxs[foundbox][indexbox]= random\r\n            \r\n            // if( indexbox > 0 ) {\r\n                if ( solution( boxs[foundbox] ) !== -1 ) {\r\n                    setRows.add(random)\r\n                    boxs[foundbox][indexbox]= 0                     \r\n                    // console.log(setRows, aa, a, random, ochouno)                    \r\n                    if(setRows.size >= 9) {\r\n                        setBoxs= new Set()\r\n                        setRows= new Set()\r\n                        rows[aa]= [0,0,0,  0,0,0,  0,0,0]\r\n                        qubs= updateQubsBy(\"rows\")\r\n                        for(let b=0;b<9;b++){\r\n                            updateBox((aa * 9) +b)\r\n                            updateCol((aa * 9) +b)\r\n                        }\r\n                        ochouno= aa* 9\r\n                        a= -1\r\n                        // ochouno= aa * 9\r\n                        continue\r\n                    }\r\n                    a=a-1\r\n                    // ochouno--\r\n                    continue\r\n                }\r\n            // }\r\n            if(/*solution(cols[a ])=== -1 &&*/ solution(rows[aa])=== -1){\r\n                rows[aa][a]= random\r\n                // cols[a][aa]= random\r\n            }\r\n            ochouno++\r\n            setBoxs= new Set()\r\n            setRows= new Set()\r\n        }\r\n        theSet= new Set()\r\n    }\r\n    return {ok:\"ok\", molino}\r\n}\r\n\r\nfunction difficult(level) {\r\n    var coef= level *0.4 +5\r\n\r\n    var diff= Math.random() * 15 \r\n    var float= parseFloat(diff.toString().slice(0,3))\r\n\r\n    if(float > coef) {\r\n        return true //se busca un numero\r\n    }\r\n    return false //no se busca nada\r\n}\r\n\r\nfunction sudoqubs (level, entity){\r\n    var suerte\r\n    var array = []\r\n    for (let index = 0; index < 9; index++) { \r\n        for (let ii = 0; ii < 9; ii++) {\r\n            suerte= difficult (level)\r\n            if (!suerte) {\r\n            entity[index][ii]= 0 \r\n            array.push(index)\r\n            }\r\n        }\r\n    }\r\n    return array.length\r\n}\r\n\r\nfunction howmanyQubs(rows){\r\n    let cont= []\r\n    for(let a=0; a<rows.length; a++){\r\n        for(let b=0; b<rows[a].length;b++){\r\n            if(rows[a][b]!==0){\r\n                cont.push(rows[a][b])\r\n            }\r\n        }\r\n    }\r\n    return cont.length\r\n}\r\n\r\nfunction rows_cols_to_squares(first, second, rowsORcols){\r\n    function dependsWhom(dominante, calibrador){\r\n        return dominante*9 +calibrador\r\n    }\r\n    if(rowsORcols==='rows'){\r\n        return dependsWhom(first,second)\r\n    }\r\n    if(rowsORcols==='cols'){\r\n        return dependsWhom(second,first)\r\n    }\r\n}\r\n\r\nfunction boxs_to_squares(box, index){\r\n    return Math.floor(index/3)*9 + index % 3 + (box % 3) * 3 + Math.floor(box/3) *3*9\r\n}\r\n\r\nfunction getBoxFromQ(q) {\r\n        \r\n    var gross= Math.floor(q / 9) //indica el numero de fila\r\n//calculamos el index vertical\r\n    var index= Math.floor(gross / 3) //este da 0, 1 ó 2\r\n//lo usamos para calcular el box exacto al cual pertenecerá\r\n    var module= (q % 9) \r\n\r\n    var foundbox= Math.floor(module / 3) + index * 3 //índice del box -> 0 al 8\r\n    let indexbox = (Math.floor(q/9)*3 + q%3) %9 //índice puntual -> 0 al 8\r\n    \r\n    // boxs[foundbox][indexbox] = qubs[q]\r\n\r\n    return [foundbox,indexbox]\r\n\r\n}\r\n\r\nposs() // Relaciona las filas, columnas y cajas entre sí\r\n\r\nrestore() // Reinicia el sudoku: borrando los datos de las filas, columnas y cajas\r\n\r\nlet sudoku =create3() // En la variable sudoku se guarda un objeto así: {ok: 'ok', molino: number}\r\n// La propiedad ok es para confirmar que salió bien y sin errores, la propiedad molino muestra la cantidad\r\n// de iteraciones que se realizaron para crear el sudoku\r\n\r\n// create3() genera el sudoku, guardando el rows, cols, y boxs los datos\r\n// Solo con el Array rows ya podemos desplegar el sudoku en el browser\r\n\r\nsudoqubs(5, rows) // Esta función es la que borra ciertos números, según cuántos se borran, se define la dificulad\r\n\r\nqubs= updateQubsBy(\"rows\") // Qubs es un Array de 81 casilleros, con esta función le pasamos los datos de rows a qubs\r\n\r\nupdateEvery() // Relaciona las filas, columnas y cajas entre sí, cada vez que se agregue un número cuando se estpe jugando al sudoku, es necesario ejecutar una variante de esta función. \r\n\r\nexport {\r\n    //Para testing\r\n    rows, cols, boxs, qubs,\r\n    updateRow,\r\n    updateCol,\r\n    updateBox,\r\n    //Para update\r\n    update,\r\n    //Para reset\r\n    resetSquare,\r\n    //Para crear estructura sudoku\r\n    possCols,\r\n    possRows,\r\n    possBoxs,\r\n    poss,\r\n    possRandC,\r\n    restore,\r\n    detectdifficulty,\r\n    megasolution,\r\n    create3,\r\n    updateQubsBy,\r\n    difficult,\r\n    //Para crear sudoku lógico:\r\n    sudoku,\r\n    //Registro de sudoku:\r\n    howmanyQubs,\r\n    //Registro errores:\r\n    pointerMistakes,\r\n    //Conversores inversos:\r\n    boxs_to_squares,\r\n    rows_cols_to_squares,\r\n    //conversor regular\r\n    getBoxFromQ\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}