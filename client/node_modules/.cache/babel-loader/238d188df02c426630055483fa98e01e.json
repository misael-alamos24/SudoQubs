{"ast":null,"code":"var _jsxFileName = \"F:\\\\code\\\\SudoQubs\\\\src\\\\components\\\\4-Four.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport '../styles/0-zero.css';\nimport { qubs, update, cols, boxs, restore, poss, detectdifficulty, megasolution, howmanyQubs, pointerMistakes, rows_cols_to_squares, getBoxFromQ, boxs_to_squares } from '../functions/2-Estructures.js';\nimport { solution } from '../functions/0-Unrepeatable.js';\nimport { type } from '@testing-library/user-event/dist/type';\nimport RepeatedIndexes from '../functions/RepeatedIndexes';\nimport Squares from '../functions/Squares';\nimport ChangeColor from '../functions/ChangeColor';\nimport ChangeState from '../functions/ChangeState'; // const { qubs, update, cols, boxs, restore } = require('../functions/2-Estructures.js');\n// const { solution } = require('../functions/0-Unrepeatable.js');\n// const { create } = require('../functions/3-Creator.js')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Four(_ref) {\n  _s();\n\n  let {\n    unity,\n    rows,\n    loyalindex,\n    carga,\n    sendFill\n  } = _ref;\n  //ESTADOS LOCALES\n  let [filas, setFilas] = useState(rows);\n  let [reps, setReps] = useState([]);\n  let [repsC, setRepsC] = useState([]);\n  let [repsB, setRepsB] = useState([]);\n  let [input, setInput] = useState({}); //Estado que maneja cada input del sudoku\n  //FUNCIONES\n  //Función que se ejecuta por cada ingreso de cualquier caracter en cualquier casilla:\n\n  function changeEach(e) {\n    var val = e.target.value;\n    console.log(\"unity, typeof loyalindex, val, typeof val\", unity, loyalindex, val, typeof val);\n    console.log(isNaN(val)); //_______________________________________________________\n    //LÍNEA QUE NO ADMITE UNA CADENA DE LARGO MAYOR A 1\n\n    if (val.length > 1) return setInput({ ...input,\n      [loyalindex]: val[0]\n    }); //MÓDULO QUE SOLO DEJA ENTRAR NÚMEROS ENTRE EL 1 AL 9\n\n    if (isNaN(val) || val === 0 || val === '0') return setInput({ ...input,\n      [loyalindex]: ''\n    });\n    setInput({ ...input,\n      [loyalindex]: val\n    }); // ______________________________________________________\n\n    if (val === '') unity = 0; //Si se borra un numero va a llegar un string vacío\n\n    if (val !== '') unity = parseInt(val);\n    qubs[loyalindex] = unity;\n    setFilas(update(loyalindex)); //CON ESTE update(q) ACTUALIZO TODAS LAS ENTIDADES (COLUMNAS, FILAS y CAJAS)\n\n    sendFill(howmanyQubs(rows)); //ESTE ES PARA CONTAR CUÁNTOS CASILLEROS ESTÁN LLENOS y CUÁNTOS VACÍOS\n\n    let repsRows = pointerMistakes('rows', megasolution(2), 2); //DETECTOR DE REPETICIONES EN LAS FILAS\n\n    let repsCols = pointerMistakes('cols', megasolution(2), 2); //PARA DETECTAR REPETICIONES EN LAS COLUMNAS\n\n    let repsBoxs = pointerMistakes('boxs', megasolution(2), 2); //PARA DETECTAR REPETICIONES EN LAS CAJAS\n    // PARTE 'A' \n\n    let indexs = RepeatedIndexes(repsRows);\n    let indexsC = RepeatedIndexes(repsCols);\n    let indexsB = RepeatedIndexes(repsBoxs); // PARTE 'B' \n\n    let squares = Squares(indexs, 'rows', rows_cols_to_squares);\n    let squaresC = Squares(indexsC, 'cols', rows_cols_to_squares);\n    let squaresB = Squares(indexsB, 'boxs', boxs_to_squares); // PARTE 'C' \n\n    ChangeColor(squares);\n    ChangeColor(squaresC);\n    ChangeColor(squaresB); // PARTE 'D' \n\n    ChangeState(reps, squares, setReps);\n    ChangeState(repsC, squaresC, setRepsC);\n    ChangeState(repsB, squaresB, setRepsB);\n  } //CONDICIONALES \n  //Cuando el botón Cargar se pulsa, carga es === true, y el sudoku se llena con los datos del algoritmo generador\n\n\n  if (carga) {\n    if (unity !== 0) {\n      document.getElementsByTagName(\"input\")[loyalindex].value = unity;\n    }\n\n    if (typeof unity !== 'number' || isNaN(unity)) {\n      // console.log(unity, typeof unity, loyalindex)\n      document.getElementsByTagName(\"input\")[loyalindex].value = 0;\n    }\n\n    if (unity === 0) {\n      document.getElementsByTagName(\"input\")[loyalindex].value = '';\n    }\n  } //UN DETALLE ESTÉTICO PARA CAMBIAR EL COLOR DE FONDO DE LAS CAJAS (VER EN EL BROWSER)\n\n\n  let box_Array = getBoxFromQ(loyalindex);\n  let back = box_Array[0] % 2 === 0 ? 'black' : 'rgb(30,20,10)';\n\n  if (loyalindex === 80) {}\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\" // No hace falta que sea type = 'number', con el Estado Local lo solucionamos\n      ,\n      value: input[loyalindex] // Esto es clave para que la última palabra la tenga el Estado Local con sus validaciones de si es un número entre 1 y 9\n      ,\n      className: loyalindex % 2 === 0 ? 'unity' : 'impar' // Define el color de los números (ver en el browser)\n      ,\n      style: {\n        backgroundColor: back\n      } // Define el color de fondo de las cajas\n      ,\n      onChange: e => changeEach(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Four, \"y0SCnw34QSxGL5FpqOTMyo0v5TU=\");\n\n_c = Four;\n\nvar _c;\n\n$RefreshReg$(_c, \"Four\");","map":{"version":3,"names":["useState","qubs","update","cols","boxs","restore","poss","detectdifficulty","megasolution","howmanyQubs","pointerMistakes","rows_cols_to_squares","getBoxFromQ","boxs_to_squares","solution","type","RepeatedIndexes","Squares","ChangeColor","ChangeState","Four","unity","rows","loyalindex","carga","sendFill","filas","setFilas","reps","setReps","repsC","setRepsC","repsB","setRepsB","input","setInput","changeEach","e","val","target","value","console","log","isNaN","length","parseInt","repsRows","repsCols","repsBoxs","indexs","indexsC","indexsB","squares","squaresC","squaresB","document","getElementsByTagName","box_Array","back","backgroundColor"],"sources":["F:/code/SudoQubs/src/components/4-Four.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport '../styles/0-zero.css';\r\nimport { qubs, update, cols, boxs, restore, poss, detectdifficulty, megasolution, howmanyQubs, pointerMistakes, rows_cols_to_squares, getBoxFromQ, boxs_to_squares } from '../functions/2-Estructures.js';\r\nimport { solution } from '../functions/0-Unrepeatable.js';\r\nimport { type } from '@testing-library/user-event/dist/type';\r\nimport RepeatedIndexes from '../functions/RepeatedIndexes';\r\nimport Squares from '../functions/Squares';\r\nimport ChangeColor from '../functions/ChangeColor';\r\nimport ChangeState from '../functions/ChangeState';\r\n\r\n// const { qubs, update, cols, boxs, restore } = require('../functions/2-Estructures.js');\r\n// const { solution } = require('../functions/0-Unrepeatable.js');\r\n// const { create } = require('../functions/3-Creator.js')\r\n\r\nexport default function Four({unity, rows, loyalindex, carga, sendFill}){\r\n\r\n    //ESTADOS LOCALES\r\n    let [filas, setFilas]= useState(rows) \r\n    let [reps, setReps]= useState([])\r\n    let [repsC, setRepsC]= useState([])\r\n    let [repsB, setRepsB]= useState([])\r\n    let [input, setInput] = useState({ }) //Estado que maneja cada input del sudoku\r\n\r\n    //FUNCIONES\r\n    //Función que se ejecuta por cada ingreso de cualquier caracter en cualquier casilla:\r\n    function changeEach(e){\r\n\r\n        var val= e.target.value\r\n        console.log(\"unity, typeof loyalindex, val, typeof val\", unity, loyalindex, val, typeof val)\r\n        console.log(isNaN(val))\r\n        \r\n        //_______________________________________________________\r\n        //LÍNEA QUE NO ADMITE UNA CADENA DE LARGO MAYOR A 1\r\n        if(val.length > 1) return setInput({...input, [loyalindex]: val[0]})\r\n        //MÓDULO QUE SOLO DEJA ENTRAR NÚMEROS ENTRE EL 1 AL 9\r\n        if(isNaN(val) || val === 0 || val === '0') return setInput({...input, [loyalindex]: ''})\r\n\r\n        setInput({...input, [loyalindex]: val}) \r\n        // ______________________________________________________\r\n\r\n        if(val==='') unity= 0 //Si se borra un numero va a llegar un string vacío\r\n        if(val!=='') unity= parseInt(val)\r\n\r\n        qubs[loyalindex]= unity\r\n        setFilas(update(loyalindex)) //CON ESTE update(q) ACTUALIZO TODAS LAS ENTIDADES (COLUMNAS, FILAS y CAJAS)\r\n        sendFill(howmanyQubs(rows)) //ESTE ES PARA CONTAR CUÁNTOS CASILLEROS ESTÁN LLENOS y CUÁNTOS VACÍOS\r\n        \r\n        let repsRows=pointerMistakes('rows', megasolution(2), 2) //DETECTOR DE REPETICIONES EN LAS FILAS\r\n        let repsCols=pointerMistakes('cols', megasolution(2), 2) //PARA DETECTAR REPETICIONES EN LAS COLUMNAS\r\n        let repsBoxs=pointerMistakes('boxs', megasolution(2), 2) //PARA DETECTAR REPETICIONES EN LAS CAJAS\r\n\r\n        // PARTE 'A' \r\n        let indexs= RepeatedIndexes( repsRows)   \r\n        \r\n        let indexsC= RepeatedIndexes( repsCols)\r\n\r\n        let indexsB= RepeatedIndexes( repsBoxs)\r\n\r\n        // PARTE 'B' \r\n        let squares= Squares(indexs, 'rows', rows_cols_to_squares)\r\n        let squaresC= Squares(indexsC, 'cols', rows_cols_to_squares)\r\n        let squaresB= Squares(indexsB, 'boxs', boxs_to_squares)\r\n\r\n        // PARTE 'C' \r\n        ChangeColor(squares)\r\n        ChangeColor(squaresC)\r\n        ChangeColor(squaresB)\r\n\r\n        // PARTE 'D' \r\n        ChangeState(reps, squares, setReps)\r\n        ChangeState(repsC, squaresC, setRepsC)\r\n        ChangeState(repsB, squaresB, setRepsB)\r\n\r\n    }\r\n\r\n    //CONDICIONALES \r\n    //Cuando el botón Cargar se pulsa, carga es === true, y el sudoku se llena con los datos del algoritmo generador\r\n    if (carga) {\r\n        if(unity!==0){\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= unity\r\n        }\r\n        if(typeof unity !== 'number' || isNaN(unity)){\r\n            // console.log(unity, typeof unity, loyalindex)\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= 0\r\n        }\r\n        if(unity===0 ){\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= ''\r\n        }\r\n    }\r\n\r\n    //UN DETALLE ESTÉTICO PARA CAMBIAR EL COLOR DE FONDO DE LAS CAJAS (VER EN EL BROWSER)\r\n    let box_Array= getBoxFromQ(loyalindex)\r\n    let back= box_Array[0]%2===0? 'black' : 'rgb(30,20,10)'\r\n    \r\n    if(loyalindex===80){\r\n    }\r\n\r\n    return (\r\n            <span >\r\n                <input type='text' // No hace falta que sea type = 'number', con el Estado Local lo solucionamos\r\n                value= {input[loyalindex]} // Esto es clave para que la última palabra la tenga el Estado Local con sus validaciones de si es un número entre 1 y 9\r\n                className= {loyalindex%2===0?'unity':'impar'} // Define el color de los números (ver en el browser)\r\n                style={{backgroundColor: back}} // Define el color de fondo de las cajas\r\n                onChange= {e=>changeEach(e)}\r\n                />\r\n            </span>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}