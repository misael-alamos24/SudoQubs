{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\santi\\\\SudoQubs\\\\src\\\\components\\\\4-Four.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport '../styles/0-zero.css';\nimport { qubs, update, cols, boxs, restore, poss, detectdifficulty, megasolution, howmanyQubs, pointerMistakes, rows_cols_to_squares, getBoxFromQ } from '../functions/2-Estructures.js';\nimport { solution } from '../functions/0-Unrepeatable.js'; // const { qubs, update, cols, boxs, restore } = require('../functions/2-Estructures.js');\n// const { solution } = require('../functions/0-Unrepeatable.js');\n// const { create } = require('../functions/3-Creator.js')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Four(_ref) {\n  _s();\n\n  let {\n    unity,\n    rows,\n    loyalindex,\n    carga,\n    sendFill,\n    sendRepsRows,\n    sendRepsCols,\n    sendRepsBoxs,\n    sending\n  } = _ref;\n  //ESTADOS LOCALES\n  let [filas, setFilas] = useState(rows);\n  let [reps, setReps] = useState([]);\n  let [noreps, setNoreps] = useState([]); //FUNCIONES\n  //Función que se ejecuta por cada ingreso de cualquier caracter en cualquier casilla:\n\n  function changeEach(e) {\n    console.log(\"unity, value\", unity, loyalindex, e.target.value);\n    var val = e.target.value;\n    if (typeof val === \"string\") return; //Si se ingresa una letra, se corta la ejecución (para que las letras no tengan ningún efecto). //Probar esto, escribir la salida acá y borrarla luego de hacer un cambio o de terminar la task. => \n\n    if (val === '') {\n      unity = 0;\n    }\n\n    if (val !== '') {\n      unity = parseInt(val);\n    }\n\n    qubs[loyalindex] = unity;\n    setFilas(update(loyalindex));\n    sendFill(howmanyQubs(rows)); // console.log(\"megasolution\", megasolution()[rows])\n\n    let repsRows = pointerMistakes('rows', megasolution(2), 2);\n    let repsCols = pointerMistakes('cols', megasolution());\n    let repsBoxs = pointerMistakes('boxs', megasolution());\n    console.log(repsRows);\n    let indexs = [];\n\n    for (let ab = 0; ab < repsRows.length; ab++) {\n      indexs[ab] = [];\n      indexs[ab].push(repsRows[ab]['indice']);\n\n      for (let ac = 0; ac < repsRows[ab]['subindice'].length; ac++) {\n        // console.log(repsRows[ab]['subindice'][ac]) //ÍNDICES\n        indexs[ab].push(repsRows[ab]['subindice'][ac]['reps']);\n      }\n    }\n\n    console.log(indexs);\n    let squares = [];\n\n    for (let i = 0; i < indexs.length; i++) {\n      let first = indexs[i][0];\n      console.log('first', first);\n\n      for (let u = 1; u < indexs[i].length; u++) {\n        let second1 = indexs[i][u][0];\n        let second2 = indexs[i][u][1];\n        console.log('second', second1, second2);\n        let sq1 = rows_cols_to_squares(first, second1, 'rows');\n        let sq2 = rows_cols_to_squares(first, second2, 'rows');\n        squares.push(sq1, sq2);\n      }\n    }\n\n    console.log(squares); //HASTA ACÄ TODO 10 PUNTOS\n    //ANTES HAY QUE HACER LA COMPARACIÓN ENTRE useState() Y pointerMistakes()\n    //EN BASE A ESO, MANDAR A PINTAR Y MANDAR A DESPINTAR\n\n    for (let gamma = 0; gamma < squares.length; gamma++) {\n      // console.log(squares[gamma][0])\n      // console.log(squares[gamma][1])\n      document.getElementsByTagName('input')[squares[gamma]].style.color = 'red';\n      document.getElementsByTagName('input')[squares[gamma]].style.color = 'red';\n    } //Y PUDIERA SER QUE HASTA ACÁ, PERFECTO TAMBIÉN\n    //LO QUE VIENE AHORA SERÍA LO RECIÉN MENCIONADO SOBRE COMPARAR PARA DESPINTAR\n    //TRAEME useState() que contiene lo de la anterior vuelta, (1)\n    //SI ES DISTINTO DE VACÍO, LO ANALIZAMOS. (2)\n    //Recordar que useState() siempre va a guardar todos los datos que le mandemos.\n    //Si nada los borra, quedan ahí. Entonces:\n    //SI useState() PRESENTA DATOS DE pointerMistakes(), IGNORAR ESTOS (3)\n    //SI PRESENTA DATOS QUE pointerMistakes() NO REGISTRÓ, DESPINTARLOS (4)\n    //Nota: al mencionar pointerMistakes(), hacemos referencia al post-producto: es decir los squares que están dentro del Array squares\n\n\n    let noReps = []; // if(reps.length){ //(1), (2)\n\n    for (let delta = 0; delta < reps.length; delta++) {\n      let test = [];\n      let e = 0;\n\n      for (let eco = 0; eco < squares.length; eco++) {\n        // if(eco===delta)continue\n        // if(reps[delta][0]===squares[eco][0]){\n        //     console.log('continue en 0')\n        // }\n        // if(reps[delta][1]===squares[eco][1]){\n        //     console.log('continue en 1')\n        // }\n        if (reps[delta] === squares[eco]) {\n          // console.log(reps[delta, squares[eco]], ' iguales')\n          test.push(1);\n        }\n\n        e = eco; // if(!test.length && e===squares.length-1){\n        //     noReps.push(reps[delta])\n        // }\n      }\n\n      if (!test.length) {\n        noReps.push(reps[delta]);\n      }\n    } // }\n\n\n    console.log(reps, squares, noReps);\n\n    for (let ohmega = 0; ohmega < noReps.length; ohmega++) {\n      let color = noReps[ohmega] % 2 === 0 ? 'orange' : 'orangered';\n      console.log(noReps[ohmega], color);\n      document.getElementsByTagName('input')[noReps[ohmega]].style.color = color;\n    }\n\n    setReps(squares); // setNoreps(...noreps)\n    //LO ÚLTIMO POR HACER ES EL SET DEL STATE\n    // let first, second1, second2, sq=[], sq1, sq2\n    // // if(typeof repsRows==='object'){\n    // if(repsRows.length){\n    // //     // console.log(repsRows, reps, reps[0], reps[0][0], reps[0][0][0])\n    // //     for(let d=0; d<reps.length;d++){\n    // //         for(let f=0; f<reps[d].length; f++){\n    // //             for(let g=0; g<reps[d][f].length; g++){\n    // //                 let color= reps[d][f][g] % 2===0? 'orange':'yellow'\n    // //                 document.getElementsByTagName('input')[reps[d][f][g]].style.color= color\n    // //                 console.log(reps.length, reps[d][f][g], color)\n    // //             }\n    // //         }\n    // //     }\n    //     let par= 0\n    //     // setReps([...reps=[]])\n    //     // console.log(repsRows['subindice'].length)\n    //     for(let aa=0; aa<repsRows.length; aa++){\n    //         let index= repsRows[aa].indice\n    //         for(let a=0; a<repsRows[aa]['subindice'].length; a++){\n    //             let toSave= repsRows[aa]['subindice'][a].reps\n    //             //toSave is an Array, so we must iterate in it to get the wanted square\n    //             sq1= (rows_cols_to_squares(index, toSave[0], 'rows')) \n    //             sq[par]= []\n    //             sq[par].push(sq1)\n    //             sq2= (rows_cols_to_squares(index, toSave[1], 'rows')) \n    //             sq[par].push(sq2)\n    //             document.getElementsByTagName('input')[sq1].style.color= 'red'\n    //             document.getElementsByTagName('input')[sq2].style.color= 'red'\n    //             par++\n    //         }\n    //     }\n    //     setReps([...reps, sq])\n    //     console.log([...reps, sq])\n    //     console.log(repsRows)\n    //     // first= repsRows['indice']\n    //     // for(let a=0; a<repsRows['subindice'].length; a++){\n    //     //     second1= repsRows['subindice'][a][0]\n    //     //     second2= repsRows['subindice'][a][1]\n    //     //     sq1= rows_cols_to_squares(first, second1, 'rows')  \n    //     //     sq2= rows_cols_to_squares(first, second2, 'rows')                \n    //     // }\n    //     // first= repsRows['indice']\n    //     // second1= repsRows['subindice']['reps'][0]\n    //     // second2= repsRows['subindice']['reps'][1]\n    //     // sq1= rows_cols_to_squares(first, second1, 'rows')\n    //     // sq2= rows_cols_to_squares(first, second2, 'rows')\n    //     // document.getElementsByTagName('input')[sq1].style.color= 'red'\n    //     // document.getElementsByTagName('input')[sq2].style.color= 'red'\n    //     // setReps([...reps, [sq1, sq2]])\n    // }\n    // if(!repsRows && reps.length){\n    //     reps.map((r,e)=> {\n    //         document.getElementsByTagName('input')[reps[e][0]].style.color= 'orange'\n    //         document.getElementsByTagName('input')[reps[e][1]].style.color= 'orange'\n    //     })\n    // }\n    // if(repsRows!== undefined){\n    // sendRepsRows(repsRows)\n    // }\n    // if(repsCols!== undefined){\n    // sendRepsCols(repsCols)\n    // }\n    // if(repsBoxs!== undefined){\n    // sendRepsBoxs(repsBoxs)\n    // }\n    // console.log(filas, 'cols: ', cols, 'boxs: ', boxs)\n\n    function politica1() {\n      if (val === '') {\n        return document.getElementsByTagName(\"input\")[loyalindex].value = '';\n      }\n    }\n\n    politica1();\n\n    function politica2() {\n      if (parseInt(val) !== parseInt(val) || val === '0' || val === '') {\n        // si no es un número, se desconsidera\n        return document.getElementsByTagName(\"input\")[loyalindex].value = '';\n      }\n    }\n\n    politica2();\n\n    function politica3() {\n      if (e.target.value.length > 1) {\n        // si la cadena es mayor a 1, se considera solo el [0]\n        politica2();\n        return document.getElementsByTagName(\"input\")[loyalindex].value = val[0];\n      }\n    }\n\n    politica3();\n  } // let [once, setOnce] = useState(false)\n  // if (sending['t'] && !once){\n  //     console.log(sending)\n  //     setOnce(true)\n  // }\n  // document.getElementsByTagName('input')[0].style.color= 'red'\n\n\n  if (carga) {\n    if (unity !== 0) {\n      document.getElementsByTagName(\"input\")[loyalindex].value = unity;\n    }\n\n    if (unity === 0) {\n      document.getElementsByTagName(\"input\")[loyalindex].value = '';\n    }\n  }\n\n  let box_Array = getBoxFromQ(loyalindex);\n  let back = box_Array[0] % 2 === 0 ? 'black' : 'rgb(30,20,10)';\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      // id={repeat ? 'rep':''} \n      className: loyalindex % 2 === 0 ? 'unity' : 'impar',\n      style: {\n        backgroundColor: back\n      } // // value= {each}\n      ,\n      onChange: e => changeEach(e) // // name= {each}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Four, \"eH9racXXJpDpY8TSMgb0NYCJ5Wk=\");\n\n_c = Four;\n\nvar _c;\n\n$RefreshReg$(_c, \"Four\");","map":{"version":3,"names":["useState","qubs","update","cols","boxs","restore","poss","detectdifficulty","megasolution","howmanyQubs","pointerMistakes","rows_cols_to_squares","getBoxFromQ","solution","Four","unity","rows","loyalindex","carga","sendFill","sendRepsRows","sendRepsCols","sendRepsBoxs","sending","filas","setFilas","reps","setReps","noreps","setNoreps","changeEach","e","console","log","target","value","val","parseInt","repsRows","repsCols","repsBoxs","indexs","ab","length","push","ac","squares","i","first","u","second1","second2","sq1","sq2","gamma","document","getElementsByTagName","style","color","noReps","delta","test","eco","ohmega","politica1","politica2","politica3","box_Array","back","backgroundColor"],"sources":["C:/Users/santi/SudoQubs/src/components/4-Four.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport '../styles/0-zero.css';\r\nimport { qubs, update, cols, boxs, restore, poss, detectdifficulty, megasolution, howmanyQubs, pointerMistakes, rows_cols_to_squares, getBoxFromQ } from '../functions/2-Estructures.js';\r\nimport { solution } from '../functions/0-Unrepeatable.js';\r\n\r\n// const { qubs, update, cols, boxs, restore } = require('../functions/2-Estructures.js');\r\n// const { solution } = require('../functions/0-Unrepeatable.js');\r\n// const { create } = require('../functions/3-Creator.js')\r\n\r\n\r\nexport default function Four({unity, rows, loyalindex, carga, sendFill, sendRepsRows, sendRepsCols, sendRepsBoxs, sending}){\r\n\r\n    //ESTADOS LOCALES\r\n    let [filas, setFilas]= useState(rows)\r\n    let [reps, setReps]= useState([])\r\n    let [noreps, setNoreps]= useState([])\r\n    \r\n    //FUNCIONES\r\n    //Función que se ejecuta por cada ingreso de cualquier caracter en cualquier casilla:\r\n    function changeEach(e){\r\n        console.log(\"unity, value\", unity, loyalindex, e.target.value)\r\n        var val= e.target.value\r\n\r\n        if(typeof val === \"string\") return //Si se ingresa una letra, se corta la ejecución (para que las letras no tengan ningún efecto). //Probar esto, escribir la salida acá y borrarla luego de hacer un cambio o de terminar la task. => \r\n\r\n        if(val===''){\r\n            unity= 0\r\n        }\r\n        if(val!==''){\r\n            unity= parseInt(val)\r\n        }\r\n        qubs[loyalindex]= unity\r\n        setFilas(update(loyalindex))\r\n        sendFill(howmanyQubs(rows))\r\n        // console.log(\"megasolution\", megasolution()[rows])\r\n        let repsRows=pointerMistakes('rows', megasolution(2), 2)\r\n        let repsCols=pointerMistakes('cols', megasolution())\r\n        let repsBoxs=pointerMistakes('boxs', megasolution())\r\n\r\n        console.log(repsRows)\r\n\r\n        let indexs= []\r\n        for(let ab= 0; ab< repsRows.length; ab++){\r\n            indexs[ab]= []\r\n            indexs[ab].push(repsRows[ab]['indice'])\r\n            for(let ac= 0; ac< repsRows[ab]['subindice'].length; ac++){\r\n                // console.log(repsRows[ab]['subindice'][ac]) //ÍNDICES\r\n                indexs[ab].push(repsRows[ab]['subindice'][ac]['reps']) \r\n            }\r\n        }\r\n        console.log( indexs) \r\n        let squares= []\r\n        for (let i = 0; i < indexs.length; i++) {\r\n            let first= indexs[i][0]\r\n            console.log('first', first)\r\n            for (let u=1;u<indexs[i].length;u++) {\r\n                let second1= indexs[i][u][0]\r\n                let second2= indexs[i][u][1]\r\n                console.log('second', second1, second2)\r\n                let sq1= rows_cols_to_squares(first, second1, 'rows')\r\n                let sq2= rows_cols_to_squares(first, second2, 'rows')\r\n                squares.push(sq1, sq2)\r\n            }\r\n        }\r\n        console.log(squares)\r\n        //HASTA ACÄ TODO 10 PUNTOS\r\n\r\n        //ANTES HAY QUE HACER LA COMPARACIÓN ENTRE useState() Y pointerMistakes()\r\n        //EN BASE A ESO, MANDAR A PINTAR Y MANDAR A DESPINTAR\r\n        for(let gamma= 0; gamma<squares.length; gamma++){\r\n            // console.log(squares[gamma][0])\r\n            // console.log(squares[gamma][1])\r\n            document.getElementsByTagName('input')[squares[gamma]].style.color= 'red'\r\n            document.getElementsByTagName('input')[squares[gamma]].style.color= 'red'\r\n        }\r\n        //Y PUDIERA SER QUE HASTA ACÁ, PERFECTO TAMBIÉN\r\n\r\n        //LO QUE VIENE AHORA SERÍA LO RECIÉN MENCIONADO SOBRE COMPARAR PARA DESPINTAR\r\n        //TRAEME useState() que contiene lo de la anterior vuelta, (1)\r\n        //SI ES DISTINTO DE VACÍO, LO ANALIZAMOS. (2)\r\n        //Recordar que useState() siempre va a guardar todos los datos que le mandemos.\r\n        //Si nada los borra, quedan ahí. Entonces:\r\n        //SI useState() PRESENTA DATOS DE pointerMistakes(), IGNORAR ESTOS (3)\r\n        //SI PRESENTA DATOS QUE pointerMistakes() NO REGISTRÓ, DESPINTARLOS (4)\r\n        \r\n        //Nota: al mencionar pointerMistakes(), hacemos referencia al post-producto: es decir los squares que están dentro del Array squares\r\n\r\n        let noReps= []\r\n        // if(reps.length){ //(1), (2)\r\n            for(let delta=0;delta<reps.length;delta++){\r\n                let test=[]\r\n                let e= 0\r\n                for(let eco=0;eco<squares.length;eco++){\r\n                    // if(eco===delta)continue\r\n                    // if(reps[delta][0]===squares[eco][0]){\r\n                    //     console.log('continue en 0')\r\n                    // }\r\n                    // if(reps[delta][1]===squares[eco][1]){\r\n                    //     console.log('continue en 1')\r\n                    // }\r\n                    if(reps[delta]===squares[eco]){\r\n                        // console.log(reps[delta, squares[eco]], ' iguales')\r\n                        test.push(1)\r\n                    }\r\n                    e= eco\r\n                    // if(!test.length && e===squares.length-1){\r\n                    //     noReps.push(reps[delta])\r\n                    // }\r\n                }\r\n                if(!test.length){\r\n                    noReps.push(reps[delta])\r\n                }\r\n            }            \r\n        // }\r\n        console.log(reps, squares, noReps)\r\n        for(let ohmega=0; ohmega< noReps.length; ohmega++){\r\n            let color= noReps[ohmega] % 2===0? 'orange':'orangered'\r\n            console.log(noReps[ohmega], color)\r\n            document.getElementsByTagName('input')[noReps[ohmega]].style.color= color\r\n        }\r\n        setReps(squares)\r\n\r\n        // setNoreps(...noreps)\r\n\r\n\r\n        //LO ÚLTIMO POR HACER ES EL SET DEL STATE\r\n\r\n        // let first, second1, second2, sq=[], sq1, sq2\r\n\r\n        // // if(typeof repsRows==='object'){\r\n        // if(repsRows.length){\r\n        // //     // console.log(repsRows, reps, reps[0], reps[0][0], reps[0][0][0])\r\n        // //     for(let d=0; d<reps.length;d++){\r\n        // //         for(let f=0; f<reps[d].length; f++){\r\n        // //             for(let g=0; g<reps[d][f].length; g++){\r\n        // //                 let color= reps[d][f][g] % 2===0? 'orange':'yellow'\r\n        // //                 document.getElementsByTagName('input')[reps[d][f][g]].style.color= color\r\n        // //                 console.log(reps.length, reps[d][f][g], color)\r\n\r\n        // //             }\r\n        // //         }\r\n        // //     }\r\n        //     let par= 0\r\n        //     // setReps([...reps=[]])\r\n        //     // console.log(repsRows['subindice'].length)\r\n        //     for(let aa=0; aa<repsRows.length; aa++){\r\n        //         let index= repsRows[aa].indice\r\n        //         for(let a=0; a<repsRows[aa]['subindice'].length; a++){\r\n        //             let toSave= repsRows[aa]['subindice'][a].reps\r\n        //             //toSave is an Array, so we must iterate in it to get the wanted square\r\n        //             sq1= (rows_cols_to_squares(index, toSave[0], 'rows')) \r\n        //             sq[par]= []\r\n        //             sq[par].push(sq1)\r\n        //             sq2= (rows_cols_to_squares(index, toSave[1], 'rows')) \r\n        //             sq[par].push(sq2)\r\n        //             document.getElementsByTagName('input')[sq1].style.color= 'red'\r\n        //             document.getElementsByTagName('input')[sq2].style.color= 'red'\r\n        //             par++\r\n        //         }\r\n        //     }\r\n        //     setReps([...reps, sq])\r\n        //     console.log([...reps, sq])\r\n        //     console.log(repsRows)\r\n\r\n        //     // first= repsRows['indice']\r\n        //     // for(let a=0; a<repsRows['subindice'].length; a++){\r\n        //     //     second1= repsRows['subindice'][a][0]\r\n        //     //     second2= repsRows['subindice'][a][1]\r\n        //     //     sq1= rows_cols_to_squares(first, second1, 'rows')  \r\n        //     //     sq2= rows_cols_to_squares(first, second2, 'rows')                \r\n        //     // }\r\n\r\n        //     // first= repsRows['indice']\r\n        //     // second1= repsRows['subindice']['reps'][0]\r\n        //     // second2= repsRows['subindice']['reps'][1]\r\n        //     // sq1= rows_cols_to_squares(first, second1, 'rows')\r\n        //     // sq2= rows_cols_to_squares(first, second2, 'rows')\r\n        //     // document.getElementsByTagName('input')[sq1].style.color= 'red'\r\n        //     // document.getElementsByTagName('input')[sq2].style.color= 'red'\r\n\r\n        //     // setReps([...reps, [sq1, sq2]])\r\n        // }\r\n        // if(!repsRows && reps.length){\r\n        //     reps.map((r,e)=> {\r\n        //         document.getElementsByTagName('input')[reps[e][0]].style.color= 'orange'\r\n        //         document.getElementsByTagName('input')[reps[e][1]].style.color= 'orange'\r\n        //     })\r\n        // }\r\n\r\n        // if(repsRows!== undefined){\r\n            // sendRepsRows(repsRows)\r\n        // }\r\n        // if(repsCols!== undefined){\r\n            // sendRepsCols(repsCols)\r\n        // }\r\n        // if(repsBoxs!== undefined){\r\n            // sendRepsBoxs(repsBoxs)\r\n        // }\r\n        // console.log(filas, 'cols: ', cols, 'boxs: ', boxs)\r\n\r\n        function politica1(){if(val===''){\r\n            return document.getElementsByTagName(\"input\")[loyalindex].value=''\r\n        }}\r\n        politica1()\r\n        function politica2(){if(parseInt(val)!==parseInt(val) || val==='0' || val==='') { // si no es un número, se desconsidera\r\n            return document.getElementsByTagName(\"input\")[loyalindex].value=''\r\n        }}\r\n        politica2()\r\n        function politica3(){if(e.target.value.length > 1) { // si la cadena es mayor a 1, se considera solo el [0]\r\n            politica2()\r\n            return document.getElementsByTagName(\"input\")[loyalindex].value= val[0]\r\n        }}      \r\n        politica3()\r\n\r\n    }\r\n\r\n    // let [once, setOnce] = useState(false)\r\n    // if (sending['t'] && !once){\r\n    //     console.log(sending)\r\n    //     setOnce(true)\r\n    // }\r\n    // document.getElementsByTagName('input')[0].style.color= 'red'\r\n\r\n\r\n    if (carga) {\r\n        if(unity!==0){\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= unity\r\n        }\r\n        if(unity===0){\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= ''\r\n        }\r\n    }\r\n\r\n    let box_Array= getBoxFromQ(loyalindex)\r\n    let back= box_Array[0]%2===0? 'black' : 'rgb(30,20,10)'\r\n\r\n    return (\r\n            <span >\r\n                <input \r\n                // id={repeat ? 'rep':''} \r\n                className=\r\n                // {(prop%9!== 0 && prop%3 === 0)?'border': (divis === 3 || divis === 6)? 'under':\r\n                {loyalindex%2===0?'unity':'impar'}\r\n                style={{backgroundColor: back}}\r\n                // // value= {each}\r\n                onChange= {e=>changeEach(e)}\r\n                // // name= {each}\r\n                />\r\n            </span>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}