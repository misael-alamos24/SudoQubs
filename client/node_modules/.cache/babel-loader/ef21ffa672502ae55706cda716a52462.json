{"ast":null,"code":"var _jsxFileName = \"F:\\\\code\\\\SudoQubs\\\\src\\\\components\\\\2-Two.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { boxs, cols, create3, detectdifficulty, megasolution, poss, possRandC, qubs, restore, rows, sudoku, update, howmanyQubs, rows_cols_to_squares } from \"../functions/2-Estructures\";\nimport Three from \"./3-Three\"; // console.log(cols, rows, boxs, qubs, 'sudoku', sudoku)\n// console.log(create())\n// let diff= (detectdifficulty(qubs).length)\n// let realizabilidad= megasolution()\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet initFilled = howmanyQubs(rows);\nexport default function Two() {\n  _s();\n\n  //9 rows con 9 squares cada una  \n  let [fill, sendFill] = useState();\n  let [carga, setCarga] = useState(false);\n  let [repsRows, sendRepsRows] = useState();\n  let [repsCols, sendRepsCols] = useState();\n  let [repsBoxs, sendRepsBoxs] = useState();\n  let [input, setInput] = useState([]); // let [sending, reSending] = useState({\n  //     b: [], c: [], r: [], t: false\n  // })\n  // console.log(repsRows, repsBoxs, repsCols)\n  // let first, second1, second2, square1, square2, test\n  // if(typeof repsRows==='object' && !sending.t){\n  //     first= repsRows['indice']\n  //     second1= repsRows['subindice']['reps'][0]\n  //     second2= repsRows['subindice']['reps'][1]\n  //     square1= rows_cols_to_squares(first, second1, 'rows')\n  //     square2= rows_cols_to_squares(first, second2, 'rows')\n  //     test= true\n  //     reSending({\n  //         ...sending,\n  //         b: [square1, square2],\n  //         t: true\n  //     })\n  // }\n  // console.log(first, second1, second2, square1, square2)\n  // document.getElementsByTagName('input')[0].style.color= 'red'\n\n  let numbers = new Array();\n  let modules = new Array();\n\n  for (let nn = 0; nn < 81; nn++) {\n    numbers.push(nn);\n  }\n\n  for (let mm = 0; mm < 9; mm++) {\n    modules.push(numbers.slice(mm * 9, (mm + 1) * 9));\n  }\n\n  function cargar() {\n    setCarga(true);\n  }\n\n  let a;\n\n  function change(e) {\n    let val = e.target.value;\n    console.log(val);\n    setInput(val);\n    console.log('val, input', val, input);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      children: [!fill && initFilled || fill && fill, \"/81 casilleros completos\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), rows.map((r, i) => /*#__PURE__*/_jsxDEV(Three, {\n      rows: rows,\n      row: r,\n      module: modules[i],\n      carga: carga && carga,\n      sendFill: sendFill,\n      sendRepsBoxs: sendRepsBoxs,\n      sendRepsCols: sendRepsCols,\n      sendRepsRows: sendRepsRows\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 32\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: cargar,\n      children: \"Cargar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"not only text\",\n      name: \"sudoku\",\n      value: input,\n      onChange: e => change(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Two, \"toUzD6KQJL9w9urJzKCJ9DnlvW4=\");\n\n_c = Two;\n\nvar _c;\n\n$RefreshReg$(_c, \"Two\");","map":{"version":3,"names":["React","useState","boxs","cols","create3","detectdifficulty","megasolution","poss","possRandC","qubs","restore","rows","sudoku","update","howmanyQubs","rows_cols_to_squares","Three","initFilled","Two","fill","sendFill","carga","setCarga","repsRows","sendRepsRows","repsCols","sendRepsCols","repsBoxs","sendRepsBoxs","input","setInput","numbers","Array","modules","nn","push","mm","slice","cargar","a","change","e","val","target","value","console","log","color","map","r","i"],"sources":["F:/code/SudoQubs/src/components/2-Two.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { boxs, cols, create3, detectdifficulty, megasolution, poss, possRandC, qubs, restore, rows, sudoku, update, howmanyQubs, rows_cols_to_squares } from \"../functions/2-Estructures\";\r\n\r\nimport Three from \"./3-Three\";\r\n\r\n// console.log(cols, rows, boxs, qubs, 'sudoku', sudoku)\r\n// console.log(create())\r\n\r\n// let diff= (detectdifficulty(qubs).length)\r\n// let realizabilidad= megasolution()\r\nlet initFilled= howmanyQubs(rows)\r\n\r\nexport default function Two() { //9 rows con 9 squares cada una  \r\n\r\n    let [fill, sendFill] = useState()\r\n    let [carga, setCarga] = useState(false)\r\n    let [repsRows, sendRepsRows] = useState()\r\n    let [repsCols, sendRepsCols] = useState()\r\n    let [repsBoxs, sendRepsBoxs] = useState()\r\n\r\n    let [input, setInput] = useState([])\r\n\r\n    // let [sending, reSending] = useState({\r\n    //     b: [], c: [], r: [], t: false\r\n    // })\r\n\r\n    // console.log(repsRows, repsBoxs, repsCols)\r\n    // let first, second1, second2, square1, square2, test\r\n\r\n    // if(typeof repsRows==='object' && !sending.t){\r\n    //     first= repsRows['indice']\r\n    //     second1= repsRows['subindice']['reps'][0]\r\n    //     second2= repsRows['subindice']['reps'][1]\r\n    //     square1= rows_cols_to_squares(first, second1, 'rows')\r\n    //     square2= rows_cols_to_squares(first, second2, 'rows')\r\n    //     test= true\r\n    //     reSending({\r\n    //         ...sending,\r\n    //         b: [square1, square2],\r\n    //         t: true\r\n    //     })\r\n    // }\r\n    // console.log(first, second1, second2, square1, square2)\r\n    // document.getElementsByTagName('input')[0].style.color= 'red'\r\n\r\n\r\n    let numbers= new Array()\r\n    let modules= new Array()\r\n    \r\n    for(let nn= 0; nn< 81; nn++){\r\n        numbers.push(nn)\r\n    }\r\n    for (let mm= 0; mm< 9; mm++){\r\n        modules.push(numbers.slice( mm * 9 , (mm + 1) * 9 ))\r\n    }\r\n\r\n    function cargar(){\r\n        setCarga(true)\r\n    }\r\n\r\n    let a\r\n    \r\n    function change(e)  {\r\n        let val= e.target.value\r\n        console.log(val)\r\n        setInput(val)\r\n        console.log('val, input', val, input)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h6 style={{color:'white'}}>\r\n                {(!fill && initFilled) || (fill && fill)}/81 casilleros completos\r\n            </h6>\r\n            {/* {rows && rows.length > 0 && rows.map((r, i)=> {a= modules[i]; console.log(a)} )} */}\r\n            {rows.map((r, i)=> <Three key={i} rows={rows} row={r} module={modules[i]} carga={carga && carga} sendFill={sendFill} sendRepsBoxs={sendRepsBoxs} sendRepsCols={sendRepsCols} sendRepsRows={sendRepsRows} />)}\r\n            <button onClick={cargar} >\r\n                Cargar\r\n            </button>\r\n            <input type='text' placeholder='not only text' name='sudoku' value={input} onChange={(e)=>change(e)} />\r\n\r\n            {/* después puede haber un ranking del mismo jugador para cada nivel que \r\n            compita, tipo jugó en 3 niveles, su ranking tiene 3 particiones, algo así\r\n            como un club que tiene divisiones inferiores, las cuales son independientes\r\n            en tanto a posición en la tabla se refiere */}\r\n        </div>\r\n    )\r\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}