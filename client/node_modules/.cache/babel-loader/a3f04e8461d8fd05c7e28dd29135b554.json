{"ast":null,"code":"var _jsxFileName = \"F:\\\\code\\\\SudoQubs\\\\client\\\\src\\\\components\\\\2-Two.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport howmanyQubs from \"../functions/18-HowmanyQubs\"; // import { boxs, cols, create3, detectdifficulty, megasolution, poss, possRandC, qubs, restore, rows, sudoku, update, howmanyQubs, rows_cols_to_squares } from \"../functions/2-Estructures\";\n\nimport Three from \"./3-Three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Two(_ref) {\n  _s();\n\n  let {\n    rows,\n    cols,\n    qubs,\n    boxs,\n    sizing\n  } = _ref;\n  //9 rows con 9 squares cada una  \n  let [fill, sendFill] = useState();\n  let [carga, setCarga] = useState(false);\n  let numbers = new Array();\n  let modules = new Array();\n\n  for (let nn = 0; nn < sizing * sizing; nn++) {\n    numbers.push(nn);\n  }\n\n  for (let mm = 0; mm < sizing; mm++) {\n    modules.push(numbers.slice(mm * sizing, (mm + 1) * sizing));\n  }\n\n  function cargar() {\n    setCarga(true);\n  }\n\n  let initFilled = howmanyQubs(rows);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      children: [!fill && initFilled || fill && fill, \"/\", sizing * sizing, \" casilleros completos\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), rows.map((r, i) => /*#__PURE__*/_jsxDEV(Three, {\n      rows: rows,\n      row: r,\n      module: modules[i],\n      carga: carga && carga,\n      sendFill: sendFill,\n      cols: cols,\n      boxs: boxs,\n      qubs: qubs\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 32\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: cargar,\n      children: \"Cargar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Two, \"A5GPMpmcudTEbYbR5YHUvCSI450=\");\n\n_c = Two;\n\nvar _c;\n\n$RefreshReg$(_c, \"Two\");","map":{"version":3,"names":["React","useState","howmanyQubs","Three","Two","rows","cols","qubs","boxs","sizing","fill","sendFill","carga","setCarga","numbers","Array","modules","nn","push","mm","slice","cargar","initFilled","color","map","r","i"],"sources":["F:/code/SudoQubs/client/src/components/2-Two.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport howmanyQubs from \"../functions/18-HowmanyQubs\";\r\n// import { boxs, cols, create3, detectdifficulty, megasolution, poss, possRandC, qubs, restore, rows, sudoku, update, howmanyQubs, rows_cols_to_squares } from \"../functions/2-Estructures\";\r\n\r\nimport Three from \"./3-Three\";\r\n\r\nexport default function Two({rows, cols, qubs, boxs, sizing}) { //9 rows con 9 squares cada una  \r\n\r\n    let [fill, sendFill] = useState()\r\n    let [carga, setCarga] = useState(false)\r\n\r\n    let numbers= new Array()\r\n    let modules= new Array()\r\n    \r\n    for(let nn= 0; nn< sizing * sizing; nn++){\r\n        numbers.push(nn)\r\n    }\r\n    for (let mm= 0; mm< sizing; mm++){\r\n        modules.push(numbers.slice( mm * sizing , (mm + 1) * sizing ))\r\n    }\r\n\r\n    function cargar(){\r\n        setCarga(true)\r\n    }\r\n\r\n    let initFilled= howmanyQubs(rows)\r\n\r\n    return (\r\n        <div>\r\n            <h6 style={{color:'white'}}>\r\n                {(!fill && initFilled) || (fill && fill)}/{sizing*sizing} casilleros completos\r\n            </h6>\r\n            {/* {rows && rows.length > 0 && rows.map((r, i)=> {a= modules[i]; console.log(a)} )} */}\r\n            {rows.map((r, i)=> <Three key={i} rows={rows} row={r} module={modules[i]} carga={carga && carga} sendFill={sendFill} cols={cols} boxs={boxs} qubs={qubs}/>)}\r\n            <button onClick={cargar} >\r\n                Cargar\r\n            </button>\r\n            {/* <input type='text' placeholder='not only text' name='sudoku' value={input} onChange={(e)=>change(e)} /> */}\r\n\r\n            {/* después puede haber un ranking del mismo jugador para cada nivel que \r\n            compita, tipo jugó en 3 niveles, su ranking tiene 3 particiones, algo así\r\n            como un club que tiene divisiones inferiores, las cuales son independientes\r\n            en tanto a posición en la tabla se refiere */}\r\n        </div>\r\n    )\r\n} "],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,6BAAxB,C,CACA;;AAEA,OAAOC,KAAP,MAAkB,WAAlB;;AAEA,eAAe,SAASC,GAAT,OAA+C;EAAA;;EAAA,IAAlC;IAACC,IAAD;IAAOC,IAAP;IAAaC,IAAb;IAAmBC,IAAnB;IAAyBC;EAAzB,CAAkC;EAAE;EAE5D,IAAI,CAACC,IAAD,EAAOC,QAAP,IAAmBV,QAAQ,EAA/B;EACA,IAAI,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAhC;EAEA,IAAIa,OAAO,GAAE,IAAIC,KAAJ,EAAb;EACA,IAAIC,OAAO,GAAE,IAAID,KAAJ,EAAb;;EAEA,KAAI,IAAIE,EAAE,GAAE,CAAZ,EAAeA,EAAE,GAAER,MAAM,GAAGA,MAA5B,EAAoCQ,EAAE,EAAtC,EAAyC;IACrCH,OAAO,CAACI,IAAR,CAAaD,EAAb;EACH;;EACD,KAAK,IAAIE,EAAE,GAAE,CAAb,EAAgBA,EAAE,GAAEV,MAApB,EAA4BU,EAAE,EAA9B,EAAiC;IAC7BH,OAAO,CAACE,IAAR,CAAaJ,OAAO,CAACM,KAAR,CAAeD,EAAE,GAAGV,MAApB,EAA6B,CAACU,EAAE,GAAG,CAAN,IAAWV,MAAxC,CAAb;EACH;;EAED,SAASY,MAAT,GAAiB;IACbR,QAAQ,CAAC,IAAD,CAAR;EACH;;EAED,IAAIS,UAAU,GAAEpB,WAAW,CAACG,IAAD,CAA3B;EAEA,oBACI;IAAA,wBACI;MAAI,KAAK,EAAE;QAACkB,KAAK,EAAC;MAAP,CAAX;MAAA,WACM,CAACb,IAAD,IAASY,UAAV,IAA0BZ,IAAI,IAAIA,IADvC,OAC+CD,MAAM,GAACA,MADtD;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAKKJ,IAAI,CAACmB,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,kBAAS,QAAC,KAAD;MAAe,IAAI,EAAErB,IAArB;MAA2B,GAAG,EAAEoB,CAAhC;MAAmC,MAAM,EAAET,OAAO,CAACU,CAAD,CAAlD;MAAuD,KAAK,EAAEd,KAAK,IAAIA,KAAvE;MAA8E,QAAQ,EAAED,QAAxF;MAAkG,IAAI,EAAEL,IAAxG;MAA8G,IAAI,EAAEE,IAApH;MAA0H,IAAI,EAAED;IAAhI,GAAYmB,CAAZ;MAAA;MAAA;MAAA;IAAA,QAAlB,CALL,eAMI;MAAQ,OAAO,EAAEL,MAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAkBH;;GAvCuBjB,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}