{"ast":null,"code":"import { solution } from \"./0-Unrepeatable\";\nimport { Loop } from \"./10-Estructures\";\nimport { IndexBox, updateBox, updateCol, updateRow } from \"./12-Update\";\nimport { updateQubsBy } from \"./16-UpdateQubsBy\";\nimport { boxs_to_squares } from \"./19-RCBtoSquares\";\nimport { RestoreEstructures } from \"./25-Generate\";\nimport { boxSize } from \"./8-Aux\"; // function updateBoxCol(loop, aa){\n//     for(let b=0;b<loop;b++){ //nine\n//         updateBox((aa * loop) +b, loop, width, heigth ) //nine\n//         updateCol((aa * loop) +b, loop, cols ) //nine\n//     }\n// }\n\nfunction create3(loop, rows, cols, boxs, qubs) {\n  var molino = 0;\n  var ochouno = 0;\n  let setRows = new Set();\n  let setBoxs = new Set();\n  let theSet = new Set();\n  let setLimitBox = [];\n  let width = boxSize(loop).width;\n  let heigth = boxSize(loop).heigth;\n  let multiplicador = 2500;\n\n  for (let aa = 0; aa < loop; aa++) {\n    //nine\n    for (let a = 0; a < loop; a++) {\n      //nine\n      if (molino > loop * loop * multiplicador) {\n        let sud1 = RestoreEstructures(loop);\n        let created = create3(loop, sud1.rows, sud1.cols, sud1.boxs, sud1.qubs);\n        let updated = updateQubsBy('rows', sud1.rows);\n        rows = created.rows;\n        cols = created.cols;\n        boxs = created.boxs;\n        qubs = updated;\n        console.log('from beyond', created, updated, 'limite tomado:', loop * loop * multiplicador);\n        return created;\n      }\n\n      molino++;\n      let random = Math.ceil(Math.random() * loop); //nine\n\n      rows[aa][a] = random;\n\n      if (solution(rows[aa]) !== -1) {\n        setRows.add(random);\n\n        if (setRows.size >= loop) {\n          //nine\n          setBoxs = new Set();\n          setRows = new Set();\n          rows[aa] = []; //reemplacé new Array(9) por Loop()\n\n          for (let zz = 0; zz < loop; zz++) {\n            rows[aa][zz] = 0;\n          } // console.log('line 36', rows, typeof rows)\n\n\n          qubs = updateQubsBy(\"rows\", rows, cols, boxs); // updateBoxCol(loop, aa)\n\n          for (let b = 0; b < loop; b++) {\n            //nine\n            updateBox(aa * loop + b, loop, boxs, qubs); //nine\n\n            updateCol(aa * loop + b, loop, cols, qubs); //nine\n          }\n\n          ochouno = aa * loop; //nine\n\n          a = -1;\n          continue;\n        }\n\n        a = a - 1;\n        continue;\n      }\n\n      cols[a][aa] = random;\n\n      if (aa > 0) {\n        if (solution(cols[a]) !== -1) {\n          setRows.add(random); // console.log(setRows, aa, a, random, ochouno)         \n\n          if (setRows.size >= loop) {\n            setBoxs = new Set();\n            setRows = new Set();\n            rows[aa] = []; //reemplacé new Array(9) por Loop()\n\n            for (let zz = 0; zz < loop; zz++) {\n              rows[aa][zz] = 0;\n            }\n\n            qubs = updateQubsBy(\"rows\", rows, cols, boxs); // updateBoxCol(loop, aa)\n\n            for (let b = 0; b < loop; b++) {\n              //nine\n              updateBox(aa * loop + b, loop, boxs, qubs); //nine\n\n              updateCol(aa * loop + b, loop, cols, qubs); //nine\n            }\n\n            ochouno = aa * loop;\n            a = -1;\n            continue;\n          }\n\n          a = a - 1;\n          continue;\n        }\n      } // REMODULADO\n      // var q= ochouno\n      // var gross= Math.floor(q / 9) //indica el numero de fila\n      // var index= Math.floor(gross / 3) //este da 0, 1 ó 2\n      // var module= (q % 9)\n      // let indexbox = (Math.floor(q/9)*3 + q%3) %9 //índice puntual -> 0 al 8\n      // var foundbox= Math.floor(module / 3) + index * 3 //índice del box -> 0 al 8\n      // boxs[foundbox][indexbox]= random\n      // updateBox(ochouno, loop, width, heigth)\n\n\n      let first = IndexBox(ochouno, loop, width, heigth).first;\n      let second = IndexBox(ochouno, loop, width, heigth).second;\n      boxs[first][second] = random;\n\n      if (solution(boxs[first]) !== -1) {\n        setRows.add(random);\n        boxs[first][second] = 0; // console.log(setRows, aa, a, random, ochouno)                    \n\n        if (setRows.size >= loop) {\n          //\n          // \n          setBoxs = new Set();\n          setRows = new Set();\n          rows[aa] = []; //reemplacé Loop() por direct explicit impertative code\n\n          for (let zz = 0; zz < loop; zz++) {\n            rows[aa][zz] = 0;\n          } // updateBoxCol(loop, aa)\n\n\n          for (let b = 0; b < loop; b++) {\n            //nine\n            updateBox(aa * loop + b, loop, boxs, qubs); //nine\n\n            updateCol(aa * loop + b, loop, cols, qubs); //nine\n          }\n\n          ochouno = aa * loop;\n          setLimitBox.unshift(first);\n          if (setLimitBox[0] !== first) setLimitBox = [];\n\n          if (setLimitBox.length >= loop) {\n            aa = first;\n            ochouno = aa * loop;\n            a = -1;\n            continue;\n          }\n\n          a = -1;\n          continue;\n        }\n\n        a = a - 1;\n        continue;\n      }\n\n      if (solution(rows[aa]) === -1) {\n        rows[aa][a] = random;\n      }\n\n      ochouno++;\n      setBoxs = new Set();\n      setRows = new Set();\n    }\n\n    theSet = new Set();\n  } // for(let mozart= 0; mozart< loop*loop; mozart++){\n  //     if(qubs[mozart]===0){\n  //         console.log('llegué', qubs, qubs.slice(-50))\n  //         let sud1= RestoreEstructures(loop)\n  //         let created= create3(loop, sud1.rows, sud1.cols, sud1.boxs, sud1.qubs)\n  //         let updated= updateQubsBy('rows', sud1.rows)\n  //         rows= created.rows; cols= created.cols; boxs= created.boxs; qubs= updated\n  //         console.log('from far far beyond', created, updated, 'limite tomado:', loop*loop*multiplicador)\n  //         return created\n  //     } //apelar a la recursión\n  // }\n\n\n  return {\n    ok: \"ok\",\n    molino,\n    rows,\n    cols,\n    boxs,\n    qubs\n  };\n}\n\nexport { create3 };","map":{"version":3,"names":["solution","Loop","IndexBox","updateBox","updateCol","updateRow","updateQubsBy","boxs_to_squares","RestoreEstructures","boxSize","create3","loop","rows","cols","boxs","qubs","molino","ochouno","setRows","Set","setBoxs","theSet","setLimitBox","width","heigth","multiplicador","aa","a","sud1","created","updated","console","log","random","Math","ceil","add","size","zz","b","first","second","unshift","length","ok"],"sources":["F:/code/SudoQubs/src/functions/17-Create.js"],"sourcesContent":["import { solution } from \"./0-Unrepeatable\"\r\nimport { Loop } from \"./10-Estructures\"\r\nimport { IndexBox, updateBox, updateCol, updateRow } from \"./12-Update\"\r\nimport { updateQubsBy } from \"./16-UpdateQubsBy\"\r\nimport { boxs_to_squares } from \"./19-RCBtoSquares\"\r\nimport { RestoreEstructures } from \"./25-Generate\"\r\nimport { boxSize } from \"./8-Aux\"\r\n\r\n// function updateBoxCol(loop, aa){\r\n//     for(let b=0;b<loop;b++){ //nine\r\n//         updateBox((aa * loop) +b, loop, width, heigth ) //nine\r\n//         updateCol((aa * loop) +b, loop, cols ) //nine\r\n//     }\r\n// }\r\n\r\nfunction create3(loop, rows, cols, boxs, qubs){\r\n\r\n    var molino= 0\r\n    var ochouno= 0\r\n    let setRows= new Set()\r\n    let setBoxs= new Set()\r\n    let theSet= new Set() \r\n    let setLimitBox= []\r\n\r\n    let width= boxSize(loop).width\r\n    let heigth= boxSize(loop).heigth\r\n    let multiplicador= 2500\r\n\r\n    for (let aa= 0; aa < loop; aa++) { //nine\r\n        for (let a= 0; a < loop; a++) { //nine\r\n            if(molino>loop*loop*multiplicador) {\r\n                let sud1= RestoreEstructures(loop)\r\n                let created= create3(loop, sud1.rows, sud1.cols, sud1.boxs, sud1.qubs)\r\n                let updated= updateQubsBy('rows', sud1.rows)\r\n                rows= created.rows; cols= created.cols; boxs= created.boxs; qubs= updated\r\n                console.log('from beyond', created, updated, 'limite tomado:', loop*loop*multiplicador)\r\n                return created\r\n            }\r\n            molino++\r\n            let random= Math.ceil( Math.random() * loop ) //nine\r\n            rows[aa][a]= random\r\n            if ( solution( rows[aa] ) !== -1 ) {\r\n                setRows.add(random)             \r\n                if(setRows.size >= loop) { //nine\r\n                    setBoxs= new Set()\r\n                    setRows= new Set()\r\n                    rows[aa]= [] //reemplacé new Array(9) por Loop()\r\n                    for(let zz=0; zz<loop;zz++){rows[aa][zz]=0}\r\n\r\n                    // console.log('line 36', rows, typeof rows)\r\n                    qubs= updateQubsBy(\"rows\", rows, cols, boxs)\r\n                    // updateBoxCol(loop, aa)\r\n                    for(let b=0;b<loop;b++){ //nine\r\n                        updateBox((aa * loop) +b, loop, boxs, qubs ) //nine\r\n                        updateCol((aa * loop) +b, loop, cols, qubs ) //nine\r\n                    }\r\n                    ochouno= aa* loop //nine\r\n                    a= -1\r\n                    continue\r\n                }\r\n                a= a-1\r\n                continue\r\n            }\r\n\r\n            cols[a][aa]= random\r\n            if (aa > 0){\r\n                if ( solution( cols[a] ) !== -1 ) {\r\n                    setRows.add(random)          \r\n                    // console.log(setRows, aa, a, random, ochouno)         \r\n                    if(setRows.size >= loop) {\r\n                        setBoxs= new Set()\r\n                        setRows= new Set()\r\n                        rows[aa]= [] //reemplacé new Array(9) por Loop()\r\n                        for(let zz=0; zz<loop;zz++){rows[aa][zz]=0}\r\n\r\n                        qubs= updateQubsBy(\"rows\", rows, cols, boxs)\r\n                        // updateBoxCol(loop, aa)\r\n                        \r\n                        for(let b=0;b<loop;b++){ //nine\r\n                            updateBox((aa * loop) +b, loop, boxs, qubs ) //nine\r\n                            updateCol((aa * loop) +b, loop, cols, qubs ) //nine\r\n                        }\r\n                        ochouno= aa* loop\r\n                        a= -1\r\n                        continue\r\n                    }    \r\n                    a= a-1\r\n                    continue\r\n                }\r\n            }\r\n\r\n            // REMODULADO\r\n            // var q= ochouno\r\n            // var gross= Math.floor(q / 9) //indica el numero de fila\r\n            // var index= Math.floor(gross / 3) //este da 0, 1 ó 2\r\n            // var module= (q % 9)\r\n            // let indexbox = (Math.floor(q/9)*3 + q%3) %9 //índice puntual -> 0 al 8\r\n            // var foundbox= Math.floor(module / 3) + index * 3 //índice del box -> 0 al 8\r\n            // boxs[foundbox][indexbox]= random\r\n\r\n            // updateBox(ochouno, loop, width, heigth)\r\n            let first= IndexBox(ochouno, loop, width, heigth).first\r\n            let second= IndexBox(ochouno, loop, width, heigth).second\r\n            boxs[first][second]= random\r\n\r\n            if ( solution( boxs[first] ) !== -1 ) {\r\n                setRows.add(random)\r\n                boxs[first][second]= 0                     \r\n                // console.log(setRows, aa, a, random, ochouno)                    \r\n                if(setRows.size >= loop) {\r\n                    //\r\n                    // \r\n                    setBoxs= new Set()\r\n                    setRows= new Set()\r\n                    rows[aa]= [] //reemplacé Loop() por direct explicit impertative code\r\n                    for(let zz=0; zz<loop;zz++){rows[aa][zz]=0}\r\n                    // updateBoxCol(loop, aa)\r\n                    \r\n                    for(let b=0;b<loop;b++){ //nine\r\n                        updateBox((aa * loop) +b, loop, boxs, qubs ) //nine\r\n                        updateCol((aa * loop) +b, loop, cols, qubs ) //nine\r\n                    }\r\n\r\n                    ochouno= aa* loop\r\n                    \r\n                    setLimitBox.unshift(first)\r\n                    if(setLimitBox[0]!==first) setLimitBox=[]                    \r\n                    if(setLimitBox.length >= loop) {\r\n                        aa= first \r\n                        ochouno= aa* loop\r\n                        a= -1\r\n                        continue\r\n                    }\r\n\r\n                    a= -1\r\n                    continue\r\n                }\r\n                a=a-1\r\n                continue\r\n            }\r\n            \r\n            if(solution(rows[aa])=== -1){\r\n                rows[aa][a]= random\r\n            }\r\n            ochouno++\r\n            setBoxs= new Set()\r\n            setRows= new Set()\r\n        }\r\n        theSet= new Set()\r\n    }\r\n    // for(let mozart= 0; mozart< loop*loop; mozart++){\r\n    //     if(qubs[mozart]===0){\r\n    //         console.log('llegué', qubs, qubs.slice(-50))\r\n    //         let sud1= RestoreEstructures(loop)\r\n    //         let created= create3(loop, sud1.rows, sud1.cols, sud1.boxs, sud1.qubs)\r\n    //         let updated= updateQubsBy('rows', sud1.rows)\r\n    //         rows= created.rows; cols= created.cols; boxs= created.boxs; qubs= updated\r\n    //         console.log('from far far beyond', created, updated, 'limite tomado:', loop*loop*multiplicador)\r\n    //         return created\r\n    //     } //apelar a la recursión\r\n    // }\r\n    return {ok:\"ok\", molino, rows, cols, boxs, qubs}\r\n}\r\n\r\nexport {\r\n    create3,\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}