{"ast":null,"code":"import { Col, Row } from \"./11-Dimensions\";\nimport { boxSize } from \"./8-Aux\";\n\nfunction updateCol(inx, nine, cols, qubs) {\n  cols[Col(inx, nine)][Row(inx, nine)] = qubs[inx];\n  return cols[Col(inx, nine)][Row(inx, nine)]; // return {\n  //     response: cols[Col(inx, nine)][Row(inx,nine)],\n  //     square: `cols[${Col(inx, nine)}][${Row(inx,nine)}]`\n  // }\n}\n\nfunction updateRow(inx, nine, rows, qubs) {\n  rows[Row(inx, nine)][Col(inx, nine)] = qubs[inx];\n  return rows[Row(inx, nine)][Col(inx, nine)]; // return {\n  //     response: rows[Row(inx, nine)][Col(inx, nine)],\n  //     square: `rows[${Row(inx, nine)}][${Col(inx, nine)}]`\n  // }\n}\n\nfunction IndexBox(q, nine) {\n  let x = boxSize(nine).width;\n  let y = boxSize(nine).heigth;\n  var gross = Row(q / nine); //indica el numero de fila\n  //calculamos el index vertical\n\n  var index = Row(gross / x); //este da 0, 1 ó 2\n  //lo usamos para calcular el box exacto al cual pertenecerá\n\n  var module = q % nine;\n  let foundbox = Row(module / y) + index * x; //índice del box -> 0 al 8\n\n  let indexbox = (Row(q / nine) * y + q % y) % nine; //índice puntual -> 0 al 8\n\n  return {\n    first: foundbox,\n    second: indexbox\n  };\n}\n\n_c = IndexBox;\n\nfunction updateBox(q, nine, boxs, qubs) {\n  console.log((q, nine, boxs, qubs));\n  let first = IndexBox(q, nine).first;\n  let second = IndexBox(q, nine).second;\n  boxs[first][second] = qubs[q];\n  return boxs[first][second];\n}\n\nexport { updateBox, updateCol, updateRow, IndexBox };\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexBox\");","map":{"version":3,"names":["Col","Row","boxSize","updateCol","inx","nine","cols","qubs","updateRow","rows","IndexBox","q","x","width","y","heigth","gross","index","module","foundbox","indexbox","first","second","updateBox","boxs","console","log"],"sources":["F:/code/SudoQubs/src/functions/12-Update.js"],"sourcesContent":["import { Col, Row } from \"./11-Dimensions\"\r\nimport { boxSize } from \"./8-Aux\"\r\n\r\nfunction updateCol(inx, nine, cols, qubs) {\r\n    cols[Col(inx, nine)][Row(inx,nine)]= qubs[inx]\r\n    return cols[Col(inx, nine)][Row(inx,nine)]\r\n    // return {\r\n    //     response: cols[Col(inx, nine)][Row(inx,nine)],\r\n    //     square: `cols[${Col(inx, nine)}][${Row(inx,nine)}]`\r\n    // }\r\n}\r\n\r\nfunction updateRow(inx, nine, rows, qubs) {\r\n    rows[Row(inx, nine)][Col(inx, nine)]= qubs[inx]\r\n    return rows[Row(inx, nine)][Col(inx, nine)]\r\n    // return {\r\n    //     response: rows[Row(inx, nine)][Col(inx, nine)],\r\n    //     square: `rows[${Row(inx, nine)}][${Col(inx, nine)}]`\r\n    // }\r\n}\r\n\r\nfunction IndexBox(q, nine) {\r\n\r\n    let x= boxSize(nine).width\r\n    let y= boxSize(nine).heigth\r\n\r\n    var gross= Row(q / nine) //indica el numero de fila\r\n//calculamos el index vertical\r\n    var index= Row(gross / x) //este da 0, 1 ó 2\r\n//lo usamos para calcular el box exacto al cual pertenecerá\r\n    var module= (q % nine) \r\n\r\n    let foundbox= Row(module / y) + index * x //índice del box -> 0 al 8\r\n    let indexbox = (Row(q / nine) * y + q % y) % nine //índice puntual -> 0 al 8\r\n\r\n    return {first: foundbox, second: indexbox}\r\n\r\n}\r\n\r\n\r\nfunction updateBox(q, nine, boxs, qubs) {\r\n\r\n    console.log((q, nine, boxs, qubs))\r\n    \r\n    let first= IndexBox(q, nine).first\r\n    let second= IndexBox(q, nine).second\r\n\r\n    boxs[first][second]= qubs[q]\r\n\r\n    return boxs[first][second]\r\n\r\n}\r\n\r\nexport {\r\n    updateBox,\r\n    updateCol,\r\n    updateRow,\r\n    IndexBox,\r\n}"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,OAAT,QAAwB,SAAxB;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;EACtCD,IAAI,CAACN,GAAG,CAACI,GAAD,EAAMC,IAAN,CAAJ,CAAJ,CAAqBJ,GAAG,CAACG,GAAD,EAAKC,IAAL,CAAxB,IAAqCE,IAAI,CAACH,GAAD,CAAzC;EACA,OAAOE,IAAI,CAACN,GAAG,CAACI,GAAD,EAAMC,IAAN,CAAJ,CAAJ,CAAqBJ,GAAG,CAACG,GAAD,EAAKC,IAAL,CAAxB,CAAP,CAFsC,CAGtC;EACA;EACA;EACA;AACH;;AAED,SAASG,SAAT,CAAmBJ,GAAnB,EAAwBC,IAAxB,EAA8BI,IAA9B,EAAoCF,IAApC,EAA0C;EACtCE,IAAI,CAACR,GAAG,CAACG,GAAD,EAAMC,IAAN,CAAJ,CAAJ,CAAqBL,GAAG,CAACI,GAAD,EAAMC,IAAN,CAAxB,IAAsCE,IAAI,CAACH,GAAD,CAA1C;EACA,OAAOK,IAAI,CAACR,GAAG,CAACG,GAAD,EAAMC,IAAN,CAAJ,CAAJ,CAAqBL,GAAG,CAACI,GAAD,EAAMC,IAAN,CAAxB,CAAP,CAFsC,CAGtC;EACA;EACA;EACA;AACH;;AAED,SAASK,QAAT,CAAkBC,CAAlB,EAAqBN,IAArB,EAA2B;EAEvB,IAAIO,CAAC,GAAEV,OAAO,CAACG,IAAD,CAAP,CAAcQ,KAArB;EACA,IAAIC,CAAC,GAAEZ,OAAO,CAACG,IAAD,CAAP,CAAcU,MAArB;EAEA,IAAIC,KAAK,GAAEf,GAAG,CAACU,CAAC,GAAGN,IAAL,CAAd,CALuB,CAKE;EAC7B;;EACI,IAAIY,KAAK,GAAEhB,GAAG,CAACe,KAAK,GAAGJ,CAAT,CAAd,CAPuB,CAOG;EAC9B;;EACI,IAAIM,MAAM,GAAGP,CAAC,GAAGN,IAAjB;EAEA,IAAIc,QAAQ,GAAElB,GAAG,CAACiB,MAAM,GAAGJ,CAAV,CAAH,GAAkBG,KAAK,GAAGL,CAAxC,CAXuB,CAWmB;;EAC1C,IAAIQ,QAAQ,GAAG,CAACnB,GAAG,CAACU,CAAC,GAAGN,IAAL,CAAH,GAAgBS,CAAhB,GAAoBH,CAAC,GAAGG,CAAzB,IAA8BT,IAA7C,CAZuB,CAY2B;;EAElD,OAAO;IAACgB,KAAK,EAAEF,QAAR;IAAkBG,MAAM,EAAEF;EAA1B,CAAP;AAEH;;KAhBQV,Q;;AAmBT,SAASa,SAAT,CAAmBZ,CAAnB,EAAsBN,IAAtB,EAA4BmB,IAA5B,EAAkCjB,IAAlC,EAAwC;EAEpCkB,OAAO,CAACC,GAAR,EAAaf,CAAC,EAAEN,IAAF,EAAQmB,IAAR,EAAcjB,IAA5B;EAEA,IAAIc,KAAK,GAAEX,QAAQ,CAACC,CAAD,EAAIN,IAAJ,CAAR,CAAkBgB,KAA7B;EACA,IAAIC,MAAM,GAAEZ,QAAQ,CAACC,CAAD,EAAIN,IAAJ,CAAR,CAAkBiB,MAA9B;EAEAE,IAAI,CAACH,KAAD,CAAJ,CAAYC,MAAZ,IAAqBf,IAAI,CAACI,CAAD,CAAzB;EAEA,OAAOa,IAAI,CAACH,KAAD,CAAJ,CAAYC,MAAZ,CAAP;AAEH;;AAED,SACIC,SADJ,EAEIpB,SAFJ,EAGIK,SAHJ,EAIIE,QAJJ"},"metadata":{},"sourceType":"module"}