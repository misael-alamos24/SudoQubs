{"ast":null,"code":"import { solution } from \"./0-Unrepeatable\";\nimport { Loop } from \"./10-Estructures\";\nimport { IndexBox, updateBox, updateCol } from \"./12-Update\";\nimport { updateQubsBy } from \"./16-UpdateQubsBy\";\nimport { boxSize } from \"./8-Aux\"; // function updateBoxCol(loop, aa){\n//     for(let b=0;b<loop;b++){ //nine\n//         updateBox((aa * loop) +b, loop, width, heigth ) //nine\n//         updateCol((aa * loop) +b, loop, cols ) //nine\n//     }\n// }\n\nfunction create3(loop, rows, cols, boxs, qubs) {\n  var molino = 0;\n  var ochouno = 0;\n  let setRows = new Set();\n  let setBoxs = new Set();\n  let theSet = new Set();\n  let width = boxSize(loop).width;\n  let heigth = boxSize(loop).heigth;\n\n  for (let aa = 0; aa < loop; aa++) {\n    //nine\n    for (let a = 0; a < loop; a++) {\n      //nine\n      molino++;\n      let random = Math.ceil(Math.random() * loop); //nine\n\n      rows[aa][a] = random;\n\n      if (solution(rows[aa]) !== -1) {\n        setRows.add(random);\n\n        if (setRows.size >= loop) {\n          //nine\n          setBoxs = new Set();\n          setRows = new Set();\n          rows[aa] = Loop(loop, 0); //reemplacé new Array(9) por Loop()\n\n          console.log('line 36', rows, typeof rows);\n          qubs = updateQubsBy(\"rows\", rows, cols, boxs); // updateBoxCol(loop, aa)\n\n          for (let b = 0; b < loop; b++) {\n            //nine\n            updateBox(aa * loop + b, loop, boxs, qubs); //nine\n\n            updateCol(aa * loop + b, loop, cols); //nine\n          }\n\n          ochouno = aa * loop; //nine\n\n          a = -1;\n          continue;\n        }\n\n        a = a - 1;\n        continue;\n      }\n\n      cols[a][aa] = random;\n\n      if (aa > 0) {\n        if (solution(cols[a]) !== -1) {\n          setRows.add(random);\n\n          if (setRows.size >= loop) {\n            setBoxs = new Set();\n            setRows = new Set();\n            rows[aa] = Loop(loop, 0);\n            qubs = updateQubsBy(\"rows\", rows, cols, boxs); // updateBoxCol(loop, aa)\n\n            for (let b = 0; b < loop; b++) {\n              //nine\n              updateBox(aa * loop + b, loop, boxs, qubs); //nine\n\n              updateCol(aa * loop + b, loop, cols); //nine\n            }\n\n            ochouno = aa * loop;\n            a = -1;\n            continue;\n          }\n\n          a = a - 1;\n          continue;\n        }\n      } // REMODULADO\n\n\n      var q = ochouno; // var gross= Math.floor(q / 9) //indica el numero de fila\n      // var index= Math.floor(gross / 3) //este da 0, 1 ó 2\n      // var module= (q % 9)\n      // let indexbox = (Math.floor(q/9)*3 + q%3) %9 //índice puntual -> 0 al 8\n      // var foundbox= Math.floor(module / 3) + index * 3 //índice del box -> 0 al 8\n      // boxs[foundbox][indexbox]= random\n      // updateBox(ochouno, loop, width, heigth)\n\n      let first = IndexBox(ochouno, loop, width, heigth).first;\n      let second = IndexBox(ochouno, loop, width, heigth).second;\n      boxs[first][second] = random;\n\n      if (solution(boxs[first]) !== -1) {\n        setRows.add(random);\n        boxs[first][second] = 0; // console.log(setRows, aa, a, random, ochouno)                    \n\n        if (setRows.size >= loop) {\n          setBoxs = new Set();\n          setRows = new Set();\n          rows[aa] = Loop(loop, 0);\n          qubs = updateQubsBy(\"rows\", rows, cols, boxs); // updateBoxCol(loop, aa)\n\n          for (let b = 0; b < loop; b++) {\n            //nine\n            updateBox(aa * loop + b, loop, boxs, qubs); //nine\n\n            updateCol(aa * loop + b, loop, cols); //nine\n          }\n\n          ochouno = aa * loop;\n          a = -1;\n          continue;\n        }\n\n        a = a - 1;\n        continue;\n      }\n\n      if (solution(rows[aa]) === -1) {\n        rows[aa][a] = random;\n      }\n\n      ochouno++;\n      setBoxs = new Set();\n      setRows = new Set();\n    }\n\n    theSet = new Set();\n  }\n\n  return {\n    ok: \"ok\",\n    molino\n  };\n}\n\nexport { create3 };","map":{"version":3,"names":["solution","Loop","IndexBox","updateBox","updateCol","updateQubsBy","boxSize","create3","loop","rows","cols","boxs","qubs","molino","ochouno","setRows","Set","setBoxs","theSet","width","heigth","aa","a","random","Math","ceil","add","size","console","log","b","q","first","second","ok"],"sources":["F:/code/SudoQubs/src/functions/17-Create.js"],"sourcesContent":["import { solution } from \"./0-Unrepeatable\"\r\nimport { Loop } from \"./10-Estructures\"\r\nimport { IndexBox, updateBox, updateCol } from \"./12-Update\"\r\nimport { updateQubsBy } from \"./16-UpdateQubsBy\"\r\nimport { boxSize } from \"./8-Aux\"\r\n\r\n// function updateBoxCol(loop, aa){\r\n//     for(let b=0;b<loop;b++){ //nine\r\n//         updateBox((aa * loop) +b, loop, width, heigth ) //nine\r\n//         updateCol((aa * loop) +b, loop, cols ) //nine\r\n//     }\r\n// }\r\n\r\nfunction create3(loop, rows, cols, boxs, qubs){\r\n\r\n    var molino= 0\r\n    var ochouno= 0\r\n    let setRows= new Set()\r\n    let setBoxs= new Set()\r\n    let theSet= new Set() \r\n\r\n    let width= boxSize(loop).width\r\n    let heigth= boxSize(loop).heigth\r\n\r\n    for (let aa= 0; aa < loop; aa++) { //nine\r\n        for (let a= 0; a < loop; a++) { //nine\r\n            molino++\r\n            let random= Math.ceil( Math.random() * loop ) //nine\r\n            rows[aa][a]= random\r\n            if ( solution( rows[aa] ) !== -1 ) {\r\n                setRows.add(random)             \r\n                if(setRows.size >= loop) { //nine\r\n                    setBoxs= new Set()\r\n                    setRows= new Set()\r\n                    rows[aa]= Loop(loop, 0) //reemplacé new Array(9) por Loop()\r\n                    console.log('line 36', rows, typeof rows)\r\n                    qubs= updateQubsBy(\"rows\", rows, cols, boxs)\r\n                    // updateBoxCol(loop, aa)\r\n                    for(let b=0;b<loop;b++){ //nine\r\n                        updateBox((aa * loop) +b, loop, boxs, qubs ) //nine\r\n                        updateCol((aa * loop) +b, loop, cols ) //nine\r\n                    }\r\n                    ochouno= aa* loop //nine\r\n                    a= -1\r\n                    continue\r\n                }\r\n                a= a-1\r\n                continue\r\n            }\r\n\r\n            cols[a][aa]= random\r\n            if (aa > 0){\r\n                if ( solution( cols[a] ) !== -1 ) {\r\n                    setRows.add(random)             \r\n                    if(setRows.size >= loop) {\r\n                        setBoxs= new Set()\r\n                        setRows= new Set()\r\n                        rows[aa]= Loop(loop, 0)\r\n                        qubs= updateQubsBy(\"rows\", rows, cols, boxs)\r\n                        // updateBoxCol(loop, aa)\r\n                        \r\n                        for(let b=0;b<loop;b++){ //nine\r\n                            updateBox((aa * loop) +b, loop, boxs, qubs ) //nine\r\n                            updateCol((aa * loop) +b, loop, cols ) //nine\r\n                        }\r\n                        ochouno= aa* loop\r\n                        a= -1\r\n                        continue\r\n                    }    \r\n                    a= a-1\r\n                    continue\r\n                }\r\n            }\r\n\r\n            // REMODULADO\r\n            var q= ochouno\r\n            // var gross= Math.floor(q / 9) //indica el numero de fila\r\n            // var index= Math.floor(gross / 3) //este da 0, 1 ó 2\r\n            // var module= (q % 9)\r\n            // let indexbox = (Math.floor(q/9)*3 + q%3) %9 //índice puntual -> 0 al 8\r\n            // var foundbox= Math.floor(module / 3) + index * 3 //índice del box -> 0 al 8\r\n            // boxs[foundbox][indexbox]= random\r\n\r\n            // updateBox(ochouno, loop, width, heigth)\r\n            let first= IndexBox(ochouno, loop, width, heigth).first\r\n            let second= IndexBox(ochouno, loop, width, heigth).second\r\n            boxs[first][second]= random\r\n\r\n            if ( solution( boxs[first] ) !== -1 ) {\r\n                setRows.add(random)\r\n                boxs[first][second]= 0                     \r\n                // console.log(setRows, aa, a, random, ochouno)                    \r\n                if(setRows.size >= loop) {\r\n                    setBoxs= new Set()\r\n                    setRows= new Set()\r\n                    rows[aa]= Loop(loop, 0)\r\n                    qubs= updateQubsBy(\"rows\", rows,cols, boxs)\r\n                    // updateBoxCol(loop, aa)\r\n                    \r\n                    for(let b=0;b<loop;b++){ //nine\r\n                        updateBox((aa * loop) +b, loop, boxs, qubs ) //nine\r\n                        updateCol((aa * loop) +b, loop, cols ) //nine\r\n                    }\r\n                    ochouno= aa* loop\r\n                    a= -1\r\n                    continue\r\n                }\r\n                a=a-1\r\n                continue\r\n            }\r\n            \r\n            if(solution(rows[aa])=== -1){\r\n                rows[aa][a]= random\r\n            }\r\n            ochouno++\r\n            setBoxs= new Set()\r\n            setRows= new Set()\r\n        }\r\n        theSet= new Set()\r\n    }\r\n    return {ok:\"ok\", molino}\r\n}\r\n\r\nexport {\r\n    create3,\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}