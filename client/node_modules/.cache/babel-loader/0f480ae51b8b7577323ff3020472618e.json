{"ast":null,"code":"import { Col, Row } from \"./11-Dimensions\";\nimport { boxSize } from \"./8-Aux\"; // function updateCol(inx, nueve) {\n//     cols[modul(inx, nueve)][floor(inx,nueve)]= qubs[inx]\n//     return qubs[inx]\n// }\n// function updateRow(inx,nueve) {\n//     rows[floor(inx,nueve)][modul(inx,nueve)]= qubs[inx]\n//     return qubs[inx]\n// }\n\nfunction updateCol(inx, nine, thecols, thequbs) {\n  var floor = Math.floor(inx / nine);\n  var mod = inx % nine;\n  thecols[mod][floor] = thequbs[inx]; // return thequbs[inx]\n} // return {\n//     response: cols[Col(inx, nine)][Row(inx,nine)],\n//     square: `cols[${Col(inx, nine)}][${Row(inx,nine)}]`\n// }\n\n\nfunction updateRow(inx, nine, rows, qubs) {\n  rows[Row(inx, nine)][Col(inx, nine)] = qubs[inx]; // return rows[Row(inx, nine)][Col(inx, nine)]\n  // return {\n  //     response: rows[Row(inx, nine)][Col(inx, nine)],\n  //     square: `rows[${Row(inx, nine)}][${Col(inx, nine)}]`\n  // }\n}\n\nfunction IndexBox(q, nine) {\n  let x = boxSize(nine).width;\n  let y = boxSize(nine).heigth; // console.log('line 27',x,y)\n\n  var gross = Row(q, nine); //indica el numero de fila\n  //calculamos el index vertical\n\n  var index = Row(gross, x); //este da 0, 1 ó 2\n  //lo usamos para calcular el box exacto al cual pertenecerá\n\n  var module = q % nine;\n  let foundbox = Row(module, y) + index * x; //índice del box -> 0 al 8\n\n  let indexbox = (Row(q, nine) * y + q % y) % nine; //índice puntual -> 0 al 8\n\n  return {\n    first: foundbox,\n    second: indexbox\n  };\n}\n\n_c = IndexBox;\n\nfunction updateBox(q, nine, boxs, qubs) {\n  // console.log('line 43', q, nine)\n  let first = IndexBox(q, nine).first;\n  let second = IndexBox(q, nine).second; // console.log(first, second, 'qubs'+ qubs, q)\n\n  boxs[first][second] = qubs[q]; // return boxs[first][second]\n}\n\nexport { updateBox, updateCol, updateRow, IndexBox };\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexBox\");","map":{"version":3,"names":["Col","Row","boxSize","updateCol","inx","nine","thecols","thequbs","floor","Math","mod","updateRow","rows","qubs","IndexBox","q","x","width","y","heigth","gross","index","module","foundbox","indexbox","first","second","updateBox","boxs"],"sources":["F:/code/SudoQubs/src/functions/12-Update.js"],"sourcesContent":["import { Col, Row } from \"./11-Dimensions\"\r\nimport { boxSize } from \"./8-Aux\"\r\n\r\n// function updateCol(inx, nueve) {\r\n//     cols[modul(inx, nueve)][floor(inx,nueve)]= qubs[inx]\r\n//     return qubs[inx]\r\n// }\r\n\r\n// function updateRow(inx,nueve) {\r\n//     rows[floor(inx,nueve)][modul(inx,nueve)]= qubs[inx]\r\n//     return qubs[inx]\r\n// }\r\n\r\nfunction updateCol(inx, nine, thecols, thequbs) {\r\n    var floor= Math.floor(inx / nine)\r\n    var mod= inx % nine\r\n    thecols[mod][floor]= thequbs[inx]\r\n    // return thequbs[inx]\r\n}\r\n// return {\r\n//     response: cols[Col(inx, nine)][Row(inx,nine)],\r\n//     square: `cols[${Col(inx, nine)}][${Row(inx,nine)}]`\r\n// }\r\n\r\n\r\nfunction updateRow(inx, nine, rows, qubs) {\r\n    rows[Row(inx, nine)][Col(inx, nine)]= qubs[inx]\r\n    // return rows[Row(inx, nine)][Col(inx, nine)]\r\n    // return {\r\n    //     response: rows[Row(inx, nine)][Col(inx, nine)],\r\n    //     square: `rows[${Row(inx, nine)}][${Col(inx, nine)}]`\r\n    // }\r\n}\r\n\r\nfunction IndexBox(q, nine) {\r\n\r\n    let x= boxSize(nine).width\r\n    let y= boxSize(nine).heigth\r\n\r\n    // console.log('line 27',x,y)\r\n\r\n    var gross= Row(q , nine) //indica el numero de fila\r\n//calculamos el index vertical\r\n    var index= Row(gross , x) //este da 0, 1 ó 2\r\n//lo usamos para calcular el box exacto al cual pertenecerá\r\n    var module= (q % nine) \r\n\r\n    let foundbox= Row(module , y) + index * x //índice del box -> 0 al 8\r\n    let indexbox = (Row(q , nine) * y + q % y) % nine //índice puntual -> 0 al 8\r\n\r\n    return {first: foundbox, second: indexbox}\r\n\r\n}\r\n\r\n\r\nfunction updateBox(q, nine, boxs, qubs) {\r\n\r\n    // console.log('line 43', q, nine)\r\n    \r\n    let first= IndexBox(q, nine).first\r\n    let second= IndexBox(q, nine).second\r\n\r\n    // console.log(first, second, 'qubs'+ qubs, q)\r\n    boxs[first][second]= qubs[q]\r\n\r\n    // return boxs[first][second]\r\n\r\n}\r\n\r\nexport {\r\n    updateBox,\r\n    updateCol,\r\n    updateRow,\r\n    IndexBox,\r\n}"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,OAAT,QAAwB,SAAxB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,OAA9B,EAAuCC,OAAvC,EAAgD;EAC5C,IAAIC,KAAK,GAAEC,IAAI,CAACD,KAAL,CAAWJ,GAAG,GAAGC,IAAjB,CAAX;EACA,IAAIK,GAAG,GAAEN,GAAG,GAAGC,IAAf;EACAC,OAAO,CAACI,GAAD,CAAP,CAAaF,KAAb,IAAqBD,OAAO,CAACH,GAAD,CAA5B,CAH4C,CAI5C;AACH,C,CACD;AACA;AACA;AACA;;;AAGA,SAASO,SAAT,CAAmBP,GAAnB,EAAwBC,IAAxB,EAA8BO,IAA9B,EAAoCC,IAApC,EAA0C;EACtCD,IAAI,CAACX,GAAG,CAACG,GAAD,EAAMC,IAAN,CAAJ,CAAJ,CAAqBL,GAAG,CAACI,GAAD,EAAMC,IAAN,CAAxB,IAAsCQ,IAAI,CAACT,GAAD,CAA1C,CADsC,CAEtC;EACA;EACA;EACA;EACA;AACH;;AAED,SAASU,QAAT,CAAkBC,CAAlB,EAAqBV,IAArB,EAA2B;EAEvB,IAAIW,CAAC,GAAEd,OAAO,CAACG,IAAD,CAAP,CAAcY,KAArB;EACA,IAAIC,CAAC,GAAEhB,OAAO,CAACG,IAAD,CAAP,CAAcc,MAArB,CAHuB,CAKvB;;EAEA,IAAIC,KAAK,GAAEnB,GAAG,CAACc,CAAD,EAAKV,IAAL,CAAd,CAPuB,CAOE;EAC7B;;EACI,IAAIgB,KAAK,GAAEpB,GAAG,CAACmB,KAAD,EAASJ,CAAT,CAAd,CATuB,CASG;EAC9B;;EACI,IAAIM,MAAM,GAAGP,CAAC,GAAGV,IAAjB;EAEA,IAAIkB,QAAQ,GAAEtB,GAAG,CAACqB,MAAD,EAAUJ,CAAV,CAAH,GAAkBG,KAAK,GAAGL,CAAxC,CAbuB,CAamB;;EAC1C,IAAIQ,QAAQ,GAAG,CAACvB,GAAG,CAACc,CAAD,EAAKV,IAAL,CAAH,GAAgBa,CAAhB,GAAoBH,CAAC,GAAGG,CAAzB,IAA8Bb,IAA7C,CAduB,CAc2B;;EAElD,OAAO;IAACoB,KAAK,EAAEF,QAAR;IAAkBG,MAAM,EAAEF;EAA1B,CAAP;AAEH;;KAlBQV,Q;;AAqBT,SAASa,SAAT,CAAmBZ,CAAnB,EAAsBV,IAAtB,EAA4BuB,IAA5B,EAAkCf,IAAlC,EAAwC;EAEpC;EAEA,IAAIY,KAAK,GAAEX,QAAQ,CAACC,CAAD,EAAIV,IAAJ,CAAR,CAAkBoB,KAA7B;EACA,IAAIC,MAAM,GAAEZ,QAAQ,CAACC,CAAD,EAAIV,IAAJ,CAAR,CAAkBqB,MAA9B,CALoC,CAOpC;;EACAE,IAAI,CAACH,KAAD,CAAJ,CAAYC,MAAZ,IAAqBb,IAAI,CAACE,CAAD,CAAzB,CARoC,CAUpC;AAEH;;AAED,SACIY,SADJ,EAEIxB,SAFJ,EAGIQ,SAHJ,EAIIG,QAJJ"},"metadata":{},"sourceType":"module"}