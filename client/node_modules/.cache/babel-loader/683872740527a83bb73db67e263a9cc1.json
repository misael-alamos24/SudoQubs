{"ast":null,"code":"var _jsxFileName = \"F:\\\\code\\\\SudoQubs\\\\src\\\\components\\\\4-Four.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport '../styles/0-zero.css';\nimport { qubs, update, cols, boxs, restore, poss, detectdifficulty, megasolution, pointerMistakes, to_squares, getBoxFromQ, megasolutionBy } from '../functions/2-Estructures.js';\nimport { solution } from '../functions/0-Unrepeatable.js';\nimport { type } from '@testing-library/user-event/dist/type';\nimport { IndexBox } from '../functions/12-Update.js';\nimport RepeatedIndexes from '../functions/RepeatedIndexes';\nimport Squares from '../functions/Squares';\nimport ChangeColor from '../functions/ChangeColor';\nimport ChangeState from '../functions/ChangeState';\nimport { updateSquare } from '../functions/13-Punctual';\nimport { findReps } from '../functions/1-Repetitions';\nimport howmanyQubs from '../functions/18-HowmanyQubs';\nimport { Wrongs } from '../functions/3-Wrongs';\nimport { boxs_to_squares, rows_cols_to_squares } from '../functions/19-RCBtoSquares';\nimport { findcolor } from '../functions/24-Background'; // const { qubs, update, cols, boxs, restore } = require('../functions/2-Estructures.js');\n// const { solution } = require('../functions/0-Unrepeatable.js');\n// const { create } = require('../functions/3-Creator.js')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Four(_ref) {\n  _s();\n\n  let {\n    unity,\n    rows,\n    loyalindex,\n    carga,\n    sendFill,\n    qubs,\n    cols,\n    boxs\n  } = _ref;\n  // console.log(rows)\n  //ESTADOS LOCALES\n  let [filas, setFilas] = useState(rows);\n  let [reps, setReps] = useState([]);\n  let [repsC, setRepsC] = useState([]);\n  let [repsB, setRepsB] = useState([]);\n  let [input, setInput] = useState({}); //Estado que maneja cada input del sudoku\n\n  let [alter, setAlter] = useState({}); //FUNCIONES\n  //Función que se ejecuta por cada ingreso de cualquier caracter en cualquier casilla:\n\n  function changeEach(e) {\n    var val = e.target.value; // console.log(\"unity, typeof loyalindex, val, typeof val\", unity, loyalindex, val, typeof val)\n    // console.log(isNaN(val))\n    //_______________________________________________________\n    //LÍNEA QUE NO ADMITE UNA CADENA DE LARGO MAYOR A 1\n\n    if (val.length > 2) return setInput({ ...input,\n      [loyalindex]: val[0]\n    }); // if(!alter[loyalindex]) return setInput({...input, [loyalindex]: unity})\n    //MÓDULO QUE SOLO DEJA ENTRAR NÚMEROS ENTRE EL 1 AL 9\n\n    if (isNaN(val) || val === 0 || val === '0') return setInput({ ...input,\n      [loyalindex]: ''\n    });\n    setInput({ ...input,\n      [loyalindex]: val\n    }); // ______________________________________________________\n\n    if (val === '') unity = 0; //Si se borra un numero va a llegar un string vacío\n\n    if (val !== '') unity = parseInt(val);\n    qubs[loyalindex] = unity;\n    setFilas(updateSquare(loyalindex, rows.length, rows, cols, boxs, qubs)); //CON ESTE update(q) ACTUALIZO TODAS LAS ENTIDADES (COLUMNAS, FILAS y CAJAS)\n\n    sendFill(howmanyQubs(rows)); //ESTE ES PARA CONTAR CUÁNTOS CASILLEROS ESTÁN LLENOS y CUÁNTOS VACÍOS\n\n    let repsRows = Wrongs('rows', findReps(2, rows, cols, boxs), 2); //DETECTOR DE REPETICIONES EN LAS FILAS\n\n    let repsCols = Wrongs('cols', findReps(2, rows, cols, boxs), 2); //PARA DETECTAR REPETICIONES EN LAS COLUMNAS\n\n    let repsBoxs = Wrongs('boxs', findReps(2, rows, cols, boxs), 2); //PARA DETECTAR REPETICIONES EN LAS CAJAS\n    // PARTE 'A' \n\n    let indexs = RepeatedIndexes(repsRows);\n    let indexsC = RepeatedIndexes(repsCols);\n    let indexsB = RepeatedIndexes(repsBoxs); // PARTE 'B' \n\n    let squares = Squares(indexs, 'rows', rows_cols_to_squares);\n    let squaresC = Squares(indexsC, 'cols', rows_cols_to_squares);\n    let squaresB = Squares(indexsB, 'boxs', boxs_to_squares); // PARTE 'C' \n\n    ChangeColor(squares);\n    ChangeColor(squaresC);\n    ChangeColor(squaresB); // PARTE 'D' \n\n    ChangeState(reps, squares, setReps);\n    ChangeState(repsC, squaresC, setRepsC);\n    ChangeState(repsB, squaresB, setRepsB); // console.log(megasolutionBy('rows',2))\n  } //CONDICIONALES \n  //Cuando el botón Cargar se pulsa, carga es === true, y el sudoku se llena con los datos del algoritmo generador\n\n\n  if (carga) {\n    if (unity !== 0) {\n      document.getElementsByTagName(\"input\")[loyalindex].value = unity;\n    }\n\n    if (typeof unity !== 'number' || isNaN(unity)) {\n      // console.log(unity, typeof unity, loyalindex)\n      document.getElementsByTagName(\"input\")[loyalindex].value = 0;\n    }\n\n    if (unity === 0) {\n      document.getElementsByTagName(\"input\")[loyalindex].value = '';\n    }\n  } //UN DETALLE ESTÉTICO PARA CAMBIAR EL COLOR DE FONDO DE LAS CAJAS (VER EN EL BROWSER)\n\n\n  let box_Array = IndexBox(loyalindex, rows.length);\n  let back; // = box_Array.first%2===0? 'black' : 'rgb(30,20,10)'\n\n  let border; // = box_Array.first%2===0? 'green' : 'purple'\n\n  let arrborder = findcolor(rows.length); // console.log(arrborder)\n\n  if (arrborder[box_Array.first]) back = 'black';\n\n  if (rows.length % 2 === 0) {\n    if (!arrborder[box_Array.first]) back = 'rgb(30,20,10)';\n  } else back = box_Array.first % 2 === 0 ? 'black' : 'rgb(30,20,10)'; // console.log(alter)\n\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"theselect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\" // No hace falta que sea type = 'number', con el Estado Local lo solucionamos\n      // value= {input[loyalindex]} // Esto es clave para que la última palabra la tenga el Estado Local con sus validaciones de si es un número entre 1 y 9\n      ,\n      className: loyalindex % 2 === 0 ? 'unity' : 'impar' // Define el color de los números (ver en el browser)\n      ,\n      style: {\n        backgroundColor: back,\n        border: `1px solid ${border}`\n      } // Define el color de fondo de las cajas\n      ,\n      onChange: e => changeEach(e) // disabled={alter[loyalindex] ? false: true}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Four, \"ULBYL+VDCJSMuWBc5Rb1rkAhuOQ=\");\n\n_c = Four;\n\nvar _c;\n\n$RefreshReg$(_c, \"Four\");","map":{"version":3,"names":["useState","qubs","update","cols","boxs","restore","poss","detectdifficulty","megasolution","pointerMistakes","to_squares","getBoxFromQ","megasolutionBy","solution","type","IndexBox","RepeatedIndexes","Squares","ChangeColor","ChangeState","updateSquare","findReps","howmanyQubs","Wrongs","boxs_to_squares","rows_cols_to_squares","findcolor","Four","unity","rows","loyalindex","carga","sendFill","filas","setFilas","reps","setReps","repsC","setRepsC","repsB","setRepsB","input","setInput","alter","setAlter","changeEach","e","val","target","value","length","isNaN","parseInt","repsRows","repsCols","repsBoxs","indexs","indexsC","indexsB","squares","squaresC","squaresB","document","getElementsByTagName","box_Array","back","border","arrborder","first","backgroundColor"],"sources":["F:/code/SudoQubs/src/components/4-Four.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport '../styles/0-zero.css';\r\nimport { qubs, update, cols, boxs, restore, poss, detectdifficulty, megasolution,  pointerMistakes, to_squares, getBoxFromQ, megasolutionBy } from '../functions/2-Estructures.js';\r\nimport { solution } from '../functions/0-Unrepeatable.js';\r\nimport { type } from '@testing-library/user-event/dist/type';\r\nimport { IndexBox } from '../functions/12-Update.js';\r\nimport RepeatedIndexes from '../functions/RepeatedIndexes';\r\nimport Squares from '../functions/Squares';\r\nimport ChangeColor from '../functions/ChangeColor';\r\nimport ChangeState from '../functions/ChangeState';\r\nimport { updateSquare } from '../functions/13-Punctual';\r\nimport { findReps } from '../functions/1-Repetitions';\r\nimport howmanyQubs from '../functions/18-HowmanyQubs';\r\nimport { Wrongs } from '../functions/3-Wrongs';\r\nimport { boxs_to_squares, rows_cols_to_squares } from '../functions/19-RCBtoSquares';\r\nimport { findcolor } from '../functions/24-Background';\r\n\r\n// const { qubs, update, cols, boxs, restore } = require('../functions/2-Estructures.js');\r\n// const { solution } = require('../functions/0-Unrepeatable.js');\r\n// const { create } = require('../functions/3-Creator.js')\r\n\r\nexport default function Four({unity, rows, loyalindex, carga, sendFill, qubs, cols, boxs}){\r\n    // console.log(rows)\r\n\r\n    //ESTADOS LOCALES\r\n    let [filas, setFilas]= useState(rows) \r\n    let [reps, setReps]= useState([])\r\n    let [repsC, setRepsC]= useState([])\r\n    let [repsB, setRepsB]= useState([])\r\n    let [input, setInput] = useState({ }) //Estado que maneja cada input del sudoku\r\n\r\n    let [alter, setAlter] = useState({ })\r\n\r\n    //FUNCIONES\r\n    //Función que se ejecuta por cada ingreso de cualquier caracter en cualquier casilla:\r\n    function changeEach(e){\r\n\r\n\r\n        var val= e.target.value\r\n        // console.log(\"unity, typeof loyalindex, val, typeof val\", unity, loyalindex, val, typeof val)\r\n        // console.log(isNaN(val))\r\n        \r\n        //_______________________________________________________\r\n        //LÍNEA QUE NO ADMITE UNA CADENA DE LARGO MAYOR A 1\r\n        if(val.length > 2) return setInput({...input, [loyalindex]: val[0]})\r\n\r\n        // if(!alter[loyalindex]) return setInput({...input, [loyalindex]: unity})\r\n\r\n        //MÓDULO QUE SOLO DEJA ENTRAR NÚMEROS ENTRE EL 1 AL 9\r\n        if(isNaN(val) || val === 0 || val === '0') return setInput({...input, [loyalindex]: ''})\r\n\r\n        setInput({...input, [loyalindex]: val}) \r\n        // ______________________________________________________\r\n\r\n        if(val==='') unity= 0 //Si se borra un numero va a llegar un string vacío\r\n        if(val!=='') unity= parseInt(val)\r\n\r\n        qubs[loyalindex]= unity\r\n        setFilas(updateSquare(loyalindex, rows.length, rows, cols, boxs, qubs)) //CON ESTE update(q) ACTUALIZO TODAS LAS ENTIDADES (COLUMNAS, FILAS y CAJAS)\r\n        sendFill(howmanyQubs(rows)) //ESTE ES PARA CONTAR CUÁNTOS CASILLEROS ESTÁN LLENOS y CUÁNTOS VACÍOS\r\n        \r\n        let repsRows=Wrongs('rows', findReps(2, rows, cols, boxs), 2) //DETECTOR DE REPETICIONES EN LAS FILAS\r\n        let repsCols=Wrongs('cols', findReps(2, rows, cols, boxs), 2) //PARA DETECTAR REPETICIONES EN LAS COLUMNAS\r\n        let repsBoxs=Wrongs('boxs', findReps(2, rows, cols, boxs), 2) //PARA DETECTAR REPETICIONES EN LAS CAJAS\r\n\r\n        // PARTE 'A' \r\n        let indexs= RepeatedIndexes( repsRows)   \r\n        let indexsC= RepeatedIndexes( repsCols)\r\n        let indexsB= RepeatedIndexes( repsBoxs)\r\n\r\n        // PARTE 'B' \r\n        let squares= Squares(indexs, 'rows', rows_cols_to_squares)\r\n        let squaresC= Squares(indexsC, 'cols', rows_cols_to_squares)\r\n        let squaresB= Squares(indexsB, 'boxs', boxs_to_squares)\r\n\r\n        // PARTE 'C' \r\n        ChangeColor(squares)\r\n        ChangeColor(squaresC)\r\n        ChangeColor(squaresB)\r\n\r\n        // PARTE 'D' \r\n        ChangeState(reps, squares, setReps)\r\n        ChangeState(repsC, squaresC, setRepsC)\r\n        ChangeState(repsB, squaresB, setRepsB)\r\n\r\n        \r\n        // console.log(megasolutionBy('rows',2))\r\n\r\n    }\r\n\r\n    //CONDICIONALES \r\n    //Cuando el botón Cargar se pulsa, carga es === true, y el sudoku se llena con los datos del algoritmo generador\r\n    if (carga) {\r\n        if(unity!==0){\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= unity\r\n        }\r\n        if(typeof unity !== 'number' || isNaN(unity)){\r\n            // console.log(unity, typeof unity, loyalindex)\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= 0\r\n        }\r\n        if(unity===0 ){\r\n            document.getElementsByTagName(\"input\")[loyalindex].value= ''\r\n        }\r\n    }\r\n\r\n    //UN DETALLE ESTÉTICO PARA CAMBIAR EL COLOR DE FONDO DE LAS CAJAS (VER EN EL BROWSER)\r\n    let box_Array= IndexBox(loyalindex, rows.length)\r\n    let back\r\n    // = box_Array.first%2===0? 'black' : 'rgb(30,20,10)'\r\n    let border\r\n    // = box_Array.first%2===0? 'green' : 'purple'\r\n    let arrborder= findcolor(rows.length)\r\n    // console.log(arrborder)\r\n    if(arrborder[box_Array.first]) back= 'black'\r\n    if(rows.length%2===0){\r\n        if(!arrborder[box_Array.first])   back= 'rgb(30,20,10)'\r\n    }\r\n    else back= box_Array.first%2===0? 'black' : 'rgb(30,20,10)'\r\n    \r\n    // console.log(alter)\r\n\r\n    return (\r\n            <span >\r\n                {/* <div> */}\r\n                    <select className='theselect'>\r\n\r\n                    </select>\r\n                    {/* <input/> */}\r\n                    <input type='text' // No hace falta que sea type = 'number', con el Estado Local lo solucionamos\r\n                    // value= {input[loyalindex]} // Esto es clave para que la última palabra la tenga el Estado Local con sus validaciones de si es un número entre 1 y 9\r\n                    className= {loyalindex%2===0?'unity':'impar'} // Define el color de los números (ver en el browser)\r\n                    style={{backgroundColor: back, border: `1px solid ${border}`}} // Define el color de fondo de las cajas\r\n                    onChange= {e=>changeEach(e)}\r\n                    // disabled={alter[loyalindex] ? false: true}\r\n                    />\r\n                {/* </div> */}\r\n            </span>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}