{"ast":null,"code":"import { detectPrime } from \"./9-PrimeNumber\";\nvar size; // function Loop(loop,b){ //loop: cuántos elementos tendrá, b: qué valor tendrá cada elemento\n//     let ar= new Array()\n//     for(let a=0;a<loop;a++){\n//         ar[a]=([])\n//         if(b===0)ar[a]=0\n//     }\n//     return ar\n// }\n// /*\n// Toda la estructura del sudoku se basa en cuántos casilleros tiene cada caja. \n// A partir de ese factor, se define el resto. \n// En el parámetro `loop` de la function Vertex, \n// el usuario define ese número según su preferencia.\n// */\n// function Vertex(loop){ \n//     if(typeof loop !== 'number') loop=9 \n//     if(detectPrime(loop)) loop=9\n//     size=loop\n//     let rows= Loop(loop)\n//     let cols= Loop(loop)\n//     let boxs= Loop(loop)\n//     let qubs= Loop(Math.pow(loop,2), 0)\n//     return {\n//         rows,\n//         cols,\n//         boxs,\n//         qubs\n//     }\n// }\n\nfunction Loop(loop, q) {\n  //loop: cuántos elementos tendrá, b: qué valor tendrá cada elemento\n  if (!q) {\n    let rows, cols, boxs;\n    rows = [];\n    cols = [];\n    boxs = [];\n\n    for (let a = 0; a < loop; a++) {\n      rows.push([]);\n      cols.push([]);\n      boxs.push([]);\n    }\n\n    return {\n      rows,\n      cols,\n      boxs\n    };\n  }\n\n  if (q) {\n    let qubs = [];\n\n    for (let a = 0; a < loop; a++) {\n      qubs.push(0);\n    }\n\n    return {\n      qubs\n    };\n  }\n}\n/*\r\nToda la estructura del sudoku se basa en cuántos casilleros tiene cada caja. \r\nA partir de ese factor, se define el resto. \r\nEn el parámetro `loop` de la function Vertex, \r\nel usuario define ese número según su preferencia.\r\n*/\n\n\n_c = Loop;\n\nfunction Vertex(loop) {\n  if (typeof loop !== 'number') loop = 9;\n  if (detectPrime(loop)) loop = 9;\n  size = loop;\n  let {\n    rows,\n    cols,\n    boxs\n  } = Loop(loop);\n  let {\n    qubs\n  } = Loop(Math.pow(loop, 2), true);\n  return {\n    rows,\n    cols,\n    boxs,\n    qubs\n  };\n}\n\n_c2 = Vertex;\nexport { Loop, Vertex // size,\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Loop\");\n$RefreshReg$(_c2, \"Vertex\");","map":{"version":3,"names":["detectPrime","size","Loop","loop","q","rows","cols","boxs","a","push","qubs","Vertex","Math","pow"],"sources":["F:/code/SudoQubs/src/functions/10-Estructures.js"],"sourcesContent":["import { detectPrime } from \"./9-PrimeNumber\";\r\n\r\nvar size\r\n\r\n// function Loop(loop,b){ //loop: cuántos elementos tendrá, b: qué valor tendrá cada elemento\r\n//     let ar= new Array()\r\n//     for(let a=0;a<loop;a++){\r\n//         ar[a]=([])\r\n//         if(b===0)ar[a]=0\r\n//     }\r\n//     return ar\r\n// }\r\n\r\n// /*\r\n// Toda la estructura del sudoku se basa en cuántos casilleros tiene cada caja. \r\n// A partir de ese factor, se define el resto. \r\n// En el parámetro `loop` de la function Vertex, \r\n// el usuario define ese número según su preferencia.\r\n// */\r\n\r\n// function Vertex(loop){ \r\n\r\n//     if(typeof loop !== 'number') loop=9 \r\n//     if(detectPrime(loop)) loop=9\r\n//     size=loop\r\n\r\n//     let rows= Loop(loop)\r\n//     let cols= Loop(loop)\r\n//     let boxs= Loop(loop)\r\n//     let qubs= Loop(Math.pow(loop,2), 0)\r\n\r\n//     return {\r\n//         rows,\r\n//         cols,\r\n//         boxs,\r\n//         qubs\r\n//     }\r\n\r\n// }\r\nfunction Loop(loop,q){ //loop: cuántos elementos tendrá, b: qué valor tendrá cada elemento\r\n    if (!q){\r\n        let rows, cols, boxs\r\n        rows= [ ]\r\n        cols= [ ]\r\n        boxs= [ ]\r\n        for(let a=0;a<loop;a++) {rows.push([]); cols.push([]); boxs.push([])}\r\n        return {rows,cols,boxs}\r\n    }\r\n    if(q){\r\n        let qubs= [ ]\r\n        for(let a=0;a<loop;a++){qubs.push(0)}\r\n        return {qubs}\r\n    }\r\n}\r\n\r\n/*\r\nToda la estructura del sudoku se basa en cuántos casilleros tiene cada caja. \r\nA partir de ese factor, se define el resto. \r\nEn el parámetro `loop` de la function Vertex, \r\nel usuario define ese número según su preferencia.\r\n*/\r\n\r\nfunction Vertex(loop){ \r\n\r\n    if(typeof loop !== 'number') loop=9 \r\n    if(detectPrime(loop)) loop=9\r\n    size=loop\r\n\r\n    let {rows, cols, boxs} = Loop(loop)\r\n\r\n    let {qubs}= Loop(Math.pow(loop,2), true)\r\n\r\n    return {\r\n        rows,\r\n        cols,\r\n        boxs,\r\n        qubs\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Loop,\r\n    Vertex,\r\n    // size,\r\n}"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AAEA,IAAIC,IAAJ,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASC,IAAT,CAAcC,IAAd,EAAmBC,CAAnB,EAAqB;EAAE;EACnB,IAAI,CAACA,CAAL,EAAO;IACH,IAAIC,IAAJ,EAAUC,IAAV,EAAgBC,IAAhB;IACAF,IAAI,GAAE,EAAN;IACAC,IAAI,GAAE,EAAN;IACAC,IAAI,GAAE,EAAN;;IACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,IAAd,EAAmBK,CAAC,EAApB,EAAwB;MAACH,IAAI,CAACI,IAAL,CAAU,EAAV;MAAeH,IAAI,CAACG,IAAL,CAAU,EAAV;MAAeF,IAAI,CAACE,IAAL,CAAU,EAAV;IAAc;;IACrE,OAAO;MAACJ,IAAD;MAAMC,IAAN;MAAWC;IAAX,CAAP;EACH;;EACD,IAAGH,CAAH,EAAK;IACD,IAAIM,IAAI,GAAE,EAAV;;IACA,KAAI,IAAIF,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,IAAd,EAAmBK,CAAC,EAApB,EAAuB;MAACE,IAAI,CAACD,IAAL,CAAU,CAAV;IAAa;;IACrC,OAAO;MAACC;IAAD,CAAP;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;;;KArBSR,I;;AAuBT,SAASS,MAAT,CAAgBR,IAAhB,EAAqB;EAEjB,IAAG,OAAOA,IAAP,KAAgB,QAAnB,EAA6BA,IAAI,GAAC,CAAL;EAC7B,IAAGH,WAAW,CAACG,IAAD,CAAd,EAAsBA,IAAI,GAAC,CAAL;EACtBF,IAAI,GAACE,IAAL;EAEA,IAAI;IAACE,IAAD;IAAOC,IAAP;IAAaC;EAAb,IAAqBL,IAAI,CAACC,IAAD,CAA7B;EAEA,IAAI;IAACO;EAAD,IAAQR,IAAI,CAACU,IAAI,CAACC,GAAL,CAASV,IAAT,EAAc,CAAd,CAAD,EAAmB,IAAnB,CAAhB;EAEA,OAAO;IACHE,IADG;IAEHC,IAFG;IAGHC,IAHG;IAIHG;EAJG,CAAP;AAOH;;MAjBQC,M;AAmBT,SACIT,IADJ,EAEIS,MAFJ,CAGI;AAHJ"},"metadata":{},"sourceType":"module"}